Description: Remove dependence on haskell98
 Since GHC 7.2, haskell98 has been incompatible with base.  BNFC uses both;
 this patch modifies it to remove the haskell98 dependence, allowing
 compilation using GHC >= 7.2.
Author: Antti-Juhani Kaijanaho <ajk@debian.org>
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=665063
Forwarded: by email to Markus Forsberg <markus.forsberg@gu.se> and Aarne Ranta <aarne@chalmers.se>
Last-Update: 2012-04-01
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/BNFC.cabal
+++ b/BNFC.cabal
@@ -24,7 +24,7 @@
 Extra-source-files: BNF.cf

 Executable bnfc
-  Build-Depends: haskell98, base>=4 && <5, mtl, directory, array, process
+  Build-Depends: base>=4 && <5, mtl, directory, array, process
   Main-is: Main.hs
   HS-source-dirs: . formats
     formats/haskell2
--- a/Main.hs
+++ b/Main.hs
@@ -41,9 +41,10 @@

 import MultiView (preprocessMCF, mkTestMulti, mkMakefileMulti)

-import System
 import System.Exit
-import Char
+import System.Environment
+import System.Cmd
+import Data.Char
 import Data.List (elemIndex)

 version = "2.4.2.0"
--- a/CF.hs
+++ b/CF.hs
@@ -101,8 +101,8 @@
            ) where

 import Utils (prParenth,(+++))
-import List (nub, intersperse, partition, sort,sort,group)
-import Char
+import Data.List (nub, intersperse, partition, sort,sort,group)
+import Data.Char
 import AbsBNF (Reg())

 -- A context free grammar consists of a set of rules and some extended
--- a/GetCF.hs
+++ b/GetCF.hs
@@ -20,17 +20,17 @@

 module GetCF where

-import Directory	( doesFileExist, renameFile )
-import Monad		( when )
+import System.Directory	( doesFileExist, renameFile )
+import Control.Monad		( when )

 import CF
 import Utils
 import ParBNF
-import List(nub,partition)
+import Data.List(nub,partition)
 import qualified AbsBNF as Abs
 -- import LexBNF
 import ErrM
-import Char
+import Data.Char
 import TypeChecker

 readCF :: FilePath -> IO CF
--- a/MultiView.hs
+++ b/MultiView.hs
@@ -20,17 +20,17 @@

 module MultiView where

-import Directory	( doesFileExist, renameFile )
+import System.Directory	( doesFileExist, renameFile )

 import qualified CF as CF
 import Utils
 import ParBNF
 import PrintBNF
-import List(nub,partition)
+import Data.List(nub,partition)
 import AbsBNF
 -- import LexBNF
 import ErrM
-import Char
+import Data.Char
 import TypeChecker

 preprocessMCF :: FilePath -> IO ([FilePath],String)
@@ -134,4 +134,4 @@
                                          ".printTree" | cnc <- cncs
   ]
  where
-   sho = show . tail . dropWhile (/='_')
\ No newline at end of file
+   sho = show . tail . dropWhile (/='_')
--- a/ParBNF.hs
+++ b/ParBNF.hs
@@ -4,7 +4,7 @@
 import AbsBNF
 import LexBNF
 import ErrM
-import Array
+import Data.Array
 #if __GLASGOW_HASKELL__ >= 503
 import GHC.Exts
 #else
--- a/PrintBNF.hs
+++ b/PrintBNF.hs
@@ -4,7 +4,7 @@
 -- pretty-printer generated by the BNF converter

 import AbsBNF
-import Char
+import Data.Char

 -- the top-level printing method
 printTree :: Print a => a -> String
--- a/formats/CFtoLatex.hs
+++ b/formats/CFtoLatex.hs
@@ -22,7 +22,7 @@
 import CF
 import AbsBNF (Reg (..))
 import Utils
-import List (nub,intersperse)
+import Data.List (nub,intersperse)

 cfToLatex :: String -> CF -> String
 cfToLatex name cf = unlines [
--- a/formats/NamedVariables.hs
+++ b/formats/NamedVariables.hs
@@ -38,8 +38,8 @@
 module NamedVariables where

 import CF
-import Char (toLower)
-import List (nub)
+import Data.Char (toLower)
+import Data.List (nub)

 type IVar = (String, Int)
 --The type of an instance variable
--- a/formats/OOAbstract.hs
+++ b/formats/OOAbstract.hs
@@ -44,8 +44,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)

 -- A datastructure more appropriate than CF

--- a/formats/c-sharp/CAbstoCSharpAbs.hs
+++ b/formats/c-sharp/CAbstoCSharpAbs.hs
@@ -44,8 +44,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)
 import Data.Maybe
 import CSharpUtils

--- a/formats/c-sharp/CAbstoCSharpAbstractVisitSkeleton.hs
+++ b/formats/c-sharp/CAbstoCSharpAbstractVisitSkeleton.hs
@@ -51,7 +51,7 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
+import Data.List
 import OOAbstract hiding (basetypes)
 import CSharpUtils
 import CAbstoCSharpAbs
--- a/formats/c-sharp/CAbstoCSharpVisitSkeleton.hs
+++ b/formats/c-sharp/CAbstoCSharpVisitSkeleton.hs
@@ -41,7 +41,7 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
+import Data.List
 import OOAbstract hiding (basetypes)
 import CSharpUtils
 import CAbstoCSharpAbs
--- a/formats/c-sharp/CFtoCSharpPrinter.hs
+++ b/formats/c-sharp/CFtoCSharpPrinter.hs
@@ -43,8 +43,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isSpace)
+import Data.List
+import Data.Char(toLower, toUpper, isSpace)
 import Data.Maybe
 import CSharpUtils

--- a/formats/c-sharp/CFtoGPLEX.hs
+++ b/formats/c-sharp/CFtoGPLEX.hs
@@ -42,7 +42,7 @@
 import RegToGPLEX
 import Utils((+++), (++++))
 import NamedVariables
-import List
+import Data.List
 import CSharpUtils

 --The environment must be returned for the parser to use.
--- a/formats/c-sharp/CFtoGPPG.hs
+++ b/formats/c-sharp/CFtoGPPG.hs
@@ -39,9 +39,9 @@
 module CFtoGPPG (cf2gppg) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import NamedVariables hiding (varName)
-import Char (toLower,isUpper,isDigit)
+import Data.Char (toLower,isUpper,isDigit)
 import Utils ((+++), (++++))
 import TypeChecker
 import ErrM
--- a/formats/c-sharp/CSharpTop.hs
+++ b/formats/c-sharp/CSharpTop.hs
@@ -48,11 +48,10 @@
 import CFtoCSharpPrinter
 import CFtoLatex
 import CSharpUtils
-import System
 import GetCF
-import Char
-import System
 import System.Directory
+import System.Environment
+import System.Exit
 import System.IO
 import System.Process
 import Data.Maybe
--- a/formats/c-sharp/CSharpUtils.hs
+++ b/formats/c-sharp/CSharpUtils.hs
@@ -40,9 +40,9 @@
 import CF
 import Control.Monad.ST
 -- Control.Monad.State
-import Char (toLower)
+import Data.Char (toLower)
 import Data.Maybe
-import List
+import Data.List
 import OOAbstract hiding (basetypes)

 type Namespace = String
--- a/formats/c-sharp/RegToGPLEX.hs
+++ b/formats/c-sharp/RegToGPLEX.hs
@@ -3,7 +3,7 @@
 -- modified from RegToFlex

 import AbsBNF
-import Char
+import Data.Char

 -- the top-level printing method
 printRegGPLEX :: Reg -> String
--- a/formats/c/CFtoBisonC.hs
+++ b/formats/c/CFtoBisonC.hs
@@ -42,9 +42,9 @@
 module CFtoBisonC (cf2Bison) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import NamedVariables hiding (varName)
-import Char (toLower)
+import Data.Char (toLower)
 import Utils ((+++), (++++))

 --This follows the basic structure of CFtoHappy.
--- a/formats/c/CFtoCAbs.hs
+++ b/formats/c/CFtoCAbs.hs
@@ -43,8 +43,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)


 --The result is two files (.H file, .C file)
--- a/formats/c/CFtoCPrinter.hs
+++ b/formats/c/CFtoCPrinter.hs
@@ -44,8 +44,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)

 --Produces (.h file, .c file)
 cf2CPrinter :: CF -> (String, String)
--- a/formats/c/CFtoCSkel.hs
+++ b/formats/c/CFtoCSkel.hs
@@ -42,8 +42,8 @@
 import CF
 import Utils			( (+++) )
 import NamedVariables
-import List			( isPrefixOf )
-import Char			( toLower, toUpper )
+import Data.List			( isPrefixOf )
+import Data.Char			( toLower, toUpper )

 --Produces (.H file, .C file)
 cf2CSkel :: CF -> (String, String)
--- a/formats/c/CFtoFlexC.hs
+++ b/formats/c/CFtoFlexC.hs
@@ -41,7 +41,7 @@
 import RegToFlex
 -- import Utils((+++), (++++))
 import NamedVariables
-import List
+import Data.List

 --The environment must be returned for the parser to use.
 cf2flex :: String -> CF -> (String, SymEnv)
--- a/formats/c/CTop.hs
+++ b/formats/c/CTop.hs
@@ -26,10 +26,9 @@
 import CFtoCSkel
 import CFtoCPrinter
 import CFtoLatex
--- import System
+import System.Exit
 import GetCF
-import Char
-import System
+import Data.Char

 makeC :: Bool -> String -> FilePath -> IO ()
 makeC make name file = do
--- a/formats/cpp/CFtoBison.hs
+++ b/formats/cpp/CFtoBison.hs
@@ -61,9 +61,9 @@
 module CFtoBison (cf2Bison) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import NamedVariables hiding (varName)
-import Char (toLower,isUpper)
+import Data.Char (toLower,isUpper)
 import Utils ((+++), (++++))
 import TypeChecker
 import ErrM
--- a/formats/cpp/CFtoCPPAbs.hs
+++ b/formats/cpp/CFtoCPPAbs.hs
@@ -43,8 +43,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)


 --The result is two files (.H file, .C file)
--- a/formats/cpp/CFtoCPPPrinter.hs
+++ b/formats/cpp/CFtoCPPPrinter.hs
@@ -25,8 +25,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)

 --Produces (.H file, .C file)
 cf2CPPPrinter :: CF -> (String, String)
--- a/formats/cpp/CFtoCVisitSkel.hs
+++ b/formats/cpp/CFtoCVisitSkel.hs
@@ -42,8 +42,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)

 --Produces (.H file, .C file)
 cf2CVisitSkel :: CF -> (String, String)
--- a/formats/cpp/CFtoFlex.hs
+++ b/formats/cpp/CFtoFlex.hs
@@ -41,7 +41,7 @@
 import RegToFlex
 import Utils((+++), (++++))
 import NamedVariables
-import List
+import Data.List
 import STLUtils

 --The environment must be returned for the parser to use.
--- a/formats/cpp/CPPTop.hs
+++ b/formats/cpp/CPPTop.hs
@@ -27,10 +27,9 @@
 import CFtoCVisitSkel
 import CFtoCPPPrinter
 import CFtoLatex
-import System
 import GetCF
-import Char
-import System
+import Data.Char
+import System.Exit

 makeCPP :: Bool -> String -> FilePath -> IO ()
 makeCPP make name file = do
--- a/formats/cpp/RegToFlex.hs
+++ b/formats/cpp/RegToFlex.hs
@@ -3,7 +3,7 @@
 -- modified from pretty-printer generated by the BNF converter

 import AbsBNF
-import Char
+import Data.Char

 -- the top-level printing method
 printRegFlex :: Reg -> String
--- a/formats/cpp_stl/CFtoBisonSTL.hs
+++ b/formats/cpp_stl/CFtoBisonSTL.hs
@@ -45,9 +45,9 @@
 module CFtoBisonSTL (cf2Bison) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import NamedVariables hiding (varName)
-import Char (toLower,isUpper,isDigit)
+import Data.Char (toLower,isUpper,isDigit)
 import Utils ((+++), (++++))
 import TypeChecker
 import ErrM
--- a/formats/cpp_stl/CFtoCVisitSkelSTL.hs
+++ b/formats/cpp_stl/CFtoCVisitSkelSTL.hs
@@ -42,8 +42,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)
 import OOAbstract
 import STLUtils

--- a/formats/cpp_stl/CFtoSTLAbs.hs
+++ b/formats/cpp_stl/CFtoSTLAbs.hs
@@ -44,8 +44,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)
 import STLUtils

 --The result is two files (.H file, .C file)
--- a/formats/cpp_stl/CFtoSTLPrinter.hs
+++ b/formats/cpp_stl/CFtoSTLPrinter.hs
@@ -25,8 +25,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)
 import STLUtils

 --Produces (.H file, .C file)
--- a/formats/cpp_stl/STLTop.hs
+++ b/formats/cpp_stl/STLTop.hs
@@ -29,10 +29,9 @@
 import CFtoCVisitSkelSTL
 import CFtoSTLPrinter
 import CFtoLatex
-import System
 import GetCF
-import Char
-import System
+import Data.Char
+import System.Exit
 import STLUtils

 makeSTL :: Bool -> Bool -> Maybe String -> String -> FilePath -> IO ()
--- a/formats/cpp_stl/STLUtils.hs
+++ b/formats/cpp_stl/STLUtils.hs
@@ -19,7 +19,7 @@

 module STLUtils where

-import Char
+import Data.Char

 nsDefine :: Maybe String -> String -> String
 nsDefine inPackage h = maybe h (\ns -> map toUpper ns ++ "_" ++ h) inPackage
--- a/formats/f-sharp/FSharpTop.hs
+++ b/formats/f-sharp/FSharpTop.hs
@@ -36,10 +36,10 @@
 import GetCF
 import Utils

-import Char
+import Data.Char
 import Data.Maybe (fromMaybe,maybe)
-import System
-import Monad(when)
+import Control.Monad(when)
+import System.Exit

 -- naming conventions

--- a/formats/haskell2/CFtoTemplate.hs
+++ b/formats/haskell2/CFtoTemplate.hs
@@ -23,8 +23,8 @@
                     ) where

 import CF
-import Char
-import List (delete)
+import Data.Char
+import Data.List (delete)

 type ModuleName = String
 type Constructor = String
--- a/formats/java/CFtoCup.hs
+++ b/formats/java/CFtoCup.hs
@@ -38,7 +38,7 @@
 module CFtoCup ( cf2Cup ) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import Data.Char (isUpper)
 import NamedVariables
 import TypeChecker  -- We need to (re-)typecheck to figure out list instances in
--- a/formats/java/CFtoJLex.hs
+++ b/formats/java/CFtoJLex.hs
@@ -42,7 +42,7 @@
 import RegToJLex
 import Utils		( (+++) )
 import NamedVariables
-import List
+import Data.List

 --The environment must be returned for the parser to use.
 cf2jlex :: String -> String -> CF -> (String, SymEnv)
--- a/formats/java/CFtoJavaAbs.hs
+++ b/formats/java/CFtoJavaAbs.hs
@@ -47,8 +47,8 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables hiding (IVar, getVars, varName)
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)

 --Produces abstract data types in Java.
 --These follow Appel's "non-object oriented" version.
--- a/formats/java/CFtoJavaPrinter.hs
+++ b/formats/java/CFtoJavaPrinter.hs
@@ -48,8 +48,8 @@
 import CF
 import NamedVariables
 import Utils		( (+++) )
-import List
-import Char		( toLower )
+import Data.List
+import Data.Char		( toLower )

 --Produces the PrettyPrinter class.
 --It will generate two methods "print" and "show"
@@ -381,4 +381,4 @@
 escapeChars ('\"':xs) = '\\' : ('\"' : (escapeChars xs))
 escapeChars (x:xs) = x : (escapeChars xs)

-isInternalVar x = x == internalCat ++ "_"
\ No newline at end of file
+isInternalVar x = x == internalCat ++ "_"
--- a/formats/java/CFtoJavaSkeleton.hs
+++ b/formats/java/CFtoJavaSkeleton.hs
@@ -21,8 +21,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower)
+import Data.List
+import Data.Char(toLower)


 cf2JavaSkeleton :: String -> String -> CF -> String
--- a/formats/java/CFtoVisitSkel.hs
+++ b/formats/java/CFtoVisitSkel.hs
@@ -42,8 +42,8 @@
 import CF
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper)
+import Data.List
+import Data.Char(toLower, toUpper)

 --Produces a Skeleton using the Visitor Design Pattern.
 --Thus the user can choose which Skeleton to use.
--- a/formats/java/JavaTop.hs
+++ b/formats/java/JavaTop.hs
@@ -37,8 +37,8 @@
 -------------------------------------------------------------------
 -- Dependencies.
 -------------------------------------------------------------------
-import Directory	( createDirectory )
-import IO		( try, isAlreadyExistsError )
+import System.Directory	( createDirectory )
+import System.IO.Error		( try, isAlreadyExistsError )

 import Utils
 import CF
@@ -49,10 +49,10 @@
 import CFtoJavaSkeleton
 import CFtoVisitSkel
 import CFtoLatex
-import System
 import GetCF		( tryReadCF, writeFileRep )
-import Char
-import List(intersperse)
+import Data.Char
+import Data.List(intersperse)
+import System.Exit

 -------------------------------------------------------------------
 -- | Build the Java output.
--- a/formats/java/RegToJLex.hs
+++ b/formats/java/RegToJLex.hs
@@ -3,7 +3,7 @@
 -- modified from pretty-printer generated by the BNF converter

 import AbsBNF
-import Char
+import Data.Char

 -- the top-level printing method
 printRegJLex :: Reg -> String
--- a/formats/java1.5/CFtoAbstractVisitor.hs
+++ b/formats/java1.5/CFtoAbstractVisitor.hs
@@ -24,8 +24,8 @@
 import CFtoJavaAbs15 (typename)
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isDigit)
+import Data.List
+import Data.Char(toLower, toUpper, isDigit)

 cf2AbstractVisitor :: String -> String -> CF -> String
 cf2AbstractVisitor packageBase packageAbsyn cf =
--- a/formats/java1.5/CFtoAllVisitor.hs
+++ b/formats/java1.5/CFtoAllVisitor.hs
@@ -24,8 +24,8 @@
 import CFtoJavaAbs15 (typename)
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isDigit)
+import Data.List
+import Data.Char(toLower, toUpper, isDigit)

 cf2AllVisitor :: String -> String -> CF -> String
 cf2AllVisitor packageBase packageAbsyn cf =
--- a/formats/java1.5/CFtoComposVisitor.hs
+++ b/formats/java1.5/CFtoComposVisitor.hs
@@ -24,8 +24,8 @@
 import CFtoJavaAbs15 (typename)
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isDigit)
+import Data.List
+import Data.Char(toLower, toUpper, isDigit)

 cf2ComposVisitor :: String -> String -> CF -> String
 cf2ComposVisitor packageBase packageAbsyn cf =
--- a/formats/java1.5/CFtoCup15.hs
+++ b/formats/java1.5/CFtoCup15.hs
@@ -40,7 +40,7 @@
 module CFtoCup15 ( cf2Cup ) where

 import CF
-import List (intersperse, isPrefixOf)
+import Data.List (intersperse, isPrefixOf)
 import NamedVariables
 import Utils ( (+++) )
 import TypeChecker  -- We need to (re-)typecheck to figure out list instances in
--- a/formats/java1.5/CFtoFoldVisitor.hs
+++ b/formats/java1.5/CFtoFoldVisitor.hs
@@ -24,8 +24,8 @@
 import CFtoJavaAbs15 (typename)
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isDigit)
+import Data.List
+import Data.Char(toLower, toUpper, isDigit)

 cf2FoldVisitor :: String -> String -> CF -> String
 cf2FoldVisitor packageBase packageAbsyn cf =
--- a/formats/java1.5/CFtoJLex15.hs
+++ b/formats/java1.5/CFtoJLex15.hs
@@ -43,7 +43,7 @@
 import RegToJLex
 import Utils		( (+++) )
 import NamedVariables
-import List
+import Data.List

 --The environment must be returned for the parser to use.
 cf2jlex :: String -> String -> CF -> (String, SymEnv)
--- a/formats/java1.5/CFtoJavaAbs15.hs
+++ b/formats/java1.5/CFtoJavaAbs15.hs
@@ -48,9 +48,9 @@
 import CF
 import Utils((+++),(++++))
 import NamedVariables hiding (IVar, getVars, varName)
-import List
-import Char(toLower, isDigit)
-import Maybe(catMaybes,fromMaybe)
+import Data.List
+import Data.Char(toLower, isDigit)
+import Data.Maybe(catMaybes,fromMaybe)

 --Produces abstract data types in Java.
 --These follow Appel's "non-object oriented" version.
--- a/formats/java1.5/CFtoJavaPrinter15.hs
+++ b/formats/java1.5/CFtoJavaPrinter15.hs
@@ -51,8 +51,8 @@
 import CF
 import NamedVariables
 import Utils		( (+++) )
-import List
-import Char		( toLower, isSpace )
+import Data.List
+import Data.Char		( toLower, isSpace )

 --Produces the PrettyPrinter class.
 --It will generate two methods "print" and "show"
--- a/formats/java1.5/CFtoVisitSkel15.hs
+++ b/formats/java1.5/CFtoVisitSkel15.hs
@@ -44,8 +44,8 @@
 import CFtoJavaAbs15 (typename)
 import Utils ((+++), (++++))
 import NamedVariables
-import List
-import Char(toLower, toUpper, isDigit)
+import Data.List
+import Data.Char(toLower, toUpper, isDigit)

 --Produces a Skeleton using the Visitor Design Pattern.
 --Thus the user can choose which Skeleton to use.
--- a/formats/java1.5/JavaTop15.hs
+++ b/formats/java1.5/JavaTop15.hs
@@ -38,8 +38,8 @@
 -------------------------------------------------------------------
 -- Dependencies.
 -------------------------------------------------------------------
-import Directory	( createDirectory )
-import IO		( try, isAlreadyExistsError )
+import System.Directory	( createDirectory )
+import System.Exit

 import Utils
 import CF
@@ -54,10 +54,9 @@
 import CFtoFoldVisitor
 import CFtoAllVisitor
 import CFtoLatex
-import System
 import GetCF		( tryReadCF, writeFileRep )
-import Char
-import List(intersperse)
+import Data.Char
+import Data.List(intersperse)

 -------------------------------------------------------------------
 -- | Build the Java output.
--- a/formats/ocaml/CFtoOCamlAbs.hs
+++ b/formats/ocaml/CFtoOCamlAbs.hs
@@ -23,7 +23,7 @@

 import CF
 import Utils((+++),(++++))
-import List(intersperse)
+import Data.List(intersperse)
 import OCamlUtil

 -- to produce an OCaml module
@@ -60,4 +60,4 @@

 contentSpec :: CF -> Cat -> String
 contentSpec cf cat = -- if isPositionCat cf cat then "((Int,Int),String)" else "String"
-    if isPositionCat cf cat then "((int * int) * string)" else "string"
\ No newline at end of file
+    if isPositionCat cf cat then "((int * int) * string)" else "string"
--- a/formats/ocaml/CFtoOCamlLex.hs
+++ b/formats/ocaml/CFtoOCamlLex.hs
@@ -22,8 +22,8 @@

 module CFtoOCamlLex (cf2ocamllex) where

-import List
-import Char
+import Data.List
+import Data.Char

 import CF
 import AbsBNF
--- a/formats/ocaml/CFtoOCamlPrinter.hs
+++ b/formats/ocaml/CFtoOCamlPrinter.hs
@@ -24,8 +24,8 @@
 import CF
 import Utils
 import CFtoTemplate
-import List (intersperse)
-import Char(toLower,isDigit)
+import Data.List (intersperse)
+import Data.Char(toLower,isDigit)
 import OCamlUtil

 -- derive pretty-printer from a BNF grammar. AR 15/2/2002
@@ -197,4 +197,4 @@
     _ -> if precCat c > 0 -- precedence-level cats are not in abstract syntax
             then "prt" ++ (fixTypeUpper $ reverse (dropWhile isDigit (reverse c)))
             else "prt" ++ (fixTypeUpper c)
-
\ No newline at end of file
+
--- a/formats/ocaml/CFtoOCamlShow.hs
+++ b/formats/ocaml/CFtoOCamlShow.hs
@@ -26,8 +26,8 @@
 import CF
 import Utils
 import CFtoTemplate
-import List (intersperse)
-import Char(toLower,isDigit)
+import Data.List (intersperse)
+import Data.Char(toLower,isDigit)
 import OCamlUtil

 cf2show :: String -> String -> CF -> String
@@ -150,4 +150,4 @@
     _ -> if precCat c > 0 -- precedence-level cats are not in abstract syntax
             then "show" ++ (fixTypeUpper $ reverse (dropWhile isDigit (reverse c)))
             else "show" ++ (fixTypeUpper c)
-
\ No newline at end of file
+
--- a/formats/ocaml/CFtoOCamlTemplate.hs
+++ b/formats/ocaml/CFtoOCamlTemplate.hs
@@ -25,8 +25,8 @@
                     ) where

 import CF
-import Char
-import List (delete)
+import Data.Char
+import Data.List (delete)
 import Utils((+++))
 import OCamlUtil

--- a/formats/ocaml/CFtoOCamlYacc.hs
+++ b/formats/ocaml/CFtoOCamlYacc.hs
@@ -27,8 +27,8 @@
         where

 import CF
-import List (intersperse,nub)
-import Char
+import Data.List (intersperse,nub)
+import Data.Char

 import Utils ((+++))
 import OCamlUtil
--- a/formats/ocaml/OCamlTop.hs
+++ b/formats/ocaml/OCamlTop.hs
@@ -35,10 +35,10 @@
 import GetCF
 import Utils

-import Char
+import Data.Char
 import Data.Maybe (fromMaybe,maybe)
-import System
-import Monad(when)
+import Control.Monad(when)
+import System.Exit

 -- naming conventions

--- a/formats/ocaml/OCamlUtil.hs
+++ b/formats/ocaml/OCamlUtil.hs
@@ -21,7 +21,7 @@

 import CF
 import Utils
-import Char (toLower, toUpper)
+import Data.Char (toLower, toUpper)

 -- Translate Haskell types to OCaml types
 -- Note: OCaml (data-)types start with lowercase letter
--- a/formats/profile/ProfileTop.hs
+++ b/formats/profile/ProfileTop.hs
@@ -36,9 +36,9 @@
 import GetCF
 import Utils

-import Char
-import System
-import Monad(when)
+import Data.Char
+import Control.Monad(when)
+import System.Exit

 -- naming conventions

--- a/formats/xml/CFtoXML.hs
+++ b/formats/xml/CFtoXML.hs
@@ -24,8 +24,8 @@
 import GetCF (writeFileRep)
 import Utils
 import CFtoTemplate
-import List (intersperse, nub)
-import Char(toLower)
+import Data.List (intersperse, nub)
+import Data.Char(toLower)

 type Coding = Bool ---- change to at least three values

--- a/formats/CFtoTxt.hs
+++ b/formats/CFtoTxt.hs
@@ -22,7 +22,7 @@
 import CF
 import AbsBNF (Reg (..))
 import Utils
-import List (nub,intersperse)
+import Data.List (nub,intersperse)

 cfToTxt :: String -> CF -> String
 cfToTxt name cf = unlines [
--- a/formats/haskell-gadt/CFtoAbstractGADT.hs
+++ b/formats/haskell-gadt/CFtoAbstractGADT.hs
@@ -21,7 +21,7 @@

 import CF
 import Utils((+++),(++++))
-import List(intersperse,nub)
+import Data.List(intersperse,nub)

 import HaskellGADTCommon

--- a/formats/haskell-gadt/CFtoPrinterGADT.hs
+++ b/formats/haskell-gadt/CFtoPrinterGADT.hs
@@ -22,8 +22,8 @@
 import CF
 import Utils
 import CFtoTemplate
-import List (intersperse)
-import Char(toLower)
+import Data.List (intersperse)
+import Data.Char(toLower)

 import HaskellGADTCommon

--- a/formats/haskell-gadt/CFtoTemplateGADT.hs
+++ b/formats/haskell-gadt/CFtoTemplateGADT.hs
@@ -24,7 +24,7 @@

 import CF
 import Utils((+++))
-import List (delete,groupBy)
+import Data.List (delete,groupBy)

 import HaskellGADTCommon

@@ -62,4 +62,4 @@
 prCatTrans :: Cat -> [Constructor] -> [String]
 prCatTrans cat cs = ["trans" ++ cat +++ "::" +++ cat +++ "-> Result",
		     "trans" ++ cat +++ "t = case t of"]
-		    ++ map prConsCase cs
\ No newline at end of file
+		    ++ map prConsCase cs
--- a/formats/haskell-gadt/HaskellGADTCommon.hs
+++ b/formats/haskell-gadt/HaskellGADTCommon.hs
@@ -21,7 +21,7 @@

 import CF

-import Char
+import Data.Char

 data Constructor = Constructor {
				consCat :: Cat,
--- a/formats/haskell-gadt/HaskellTopGADT.hs
+++ b/formats/haskell-gadt/HaskellTopGADT.hs
@@ -40,10 +40,10 @@
 import GetCF
 import Utils

-import Char
+import Data.Char
 import Data.Maybe (fromMaybe,maybe)
-import System
-import Monad(when)
+import Control.Monad(when)
+import System.Exit

 -- naming conventions

--- a/formats/haskell2/CFtoAbstract.hs
+++ b/formats/haskell2/CFtoAbstract.hs
@@ -21,7 +21,7 @@

 import CF
 import Utils((+++),(++++))
-import List(intersperse)
+import Data.List(intersperse)

 -- to produce a Haskell module
 cf2Abstract :: Bool -> String -> CF -> String
@@ -48,4 +48,4 @@
   where
     stringType
       | byteStrings = "BS.ByteString"
-      | otherwise   = "String"
\ No newline at end of file
+      | otherwise   = "String"
--- a/formats/haskell2/CFtoAlex.hs
+++ b/formats/haskell2/CFtoAlex.hs
@@ -22,7 +22,7 @@

 import CF
 import RegToAlex
-import List
+import Data.List

 cf2alex :: String -> String -> CF -> String
 cf2alex name errMod cf = unlines $ concat $ intersperse [""] [
--- a/formats/haskell2/CFtoAlex2.hs
+++ b/formats/haskell2/CFtoAlex2.hs
@@ -33,11 +33,11 @@
 module CFtoAlex2 (cf2alex2) where

 import CF
-import List
+import Data.List

 -- For RegToAlex, see below.
 import AbsBNF
-import Char
+import Data.Char

 cf2alex2 :: String -> String -> String -> Bool -> Bool -> CF -> String
 cf2alex2 name errMod shareMod shareStrings byteStrings cf =
--- a/formats/haskell2/CFtoHappy.hs
+++ b/formats/haskell2/CFtoHappy.hs
@@ -26,8 +26,8 @@

 import CF
 --import Lexer
-import List (intersperse, sort)
-import Char
+import Data.List (intersperse, sort)
+import Data.Char

 -- Type declarations

--- a/formats/haskell2/CFtoPrinter.hs
+++ b/formats/haskell2/CFtoPrinter.hs
@@ -22,8 +22,8 @@
 import CF
 import Utils
 import CFtoTemplate
-import List (intersperse)
-import Char(toLower)
+import Data.List (intersperse)
+import Data.Char(toLower)

 -- derive pretty-printer from a BNF grammar. AR 15/2/2002
 cf2Printer :: Bool -> String -> String -> CF -> String
--- a/formats/haskell2/HaskellTop.hs
+++ b/formats/haskell2/HaskellTop.hs
@@ -36,14 +36,13 @@
 import MkErrM
 import MkSharedString
 -- import CFtoGF		( cf2AbsGF, cf2ConcGF )
--- import System
+import System.Exit
 import GetCF
 import Utils

-import Char
+import Data.Char
 import Data.Maybe (fromMaybe,maybe)
-import System
-import Monad(when)
+import Control.Monad(when)

 -- naming conventions

--- a/formats/haskell2/RegToAlex.hs
+++ b/formats/haskell2/RegToAlex.hs
@@ -22,7 +22,7 @@
 -- modified from pretty-printer generated by the BNF converter

 import AbsBNF
-import Char
+import Data.Char

 -- the top-level printing method
 printRegAlex :: Reg -> String
--- a/formats/profile/CFtoHappyProfile.hs
+++ b/formats/profile/CFtoHappyProfile.hs
@@ -25,8 +25,8 @@

 import CF
 --import Lexer
-import List (intersperse)
-import Char
+import Data.List (intersperse)
+import Data.Char

 -- Type declarations
