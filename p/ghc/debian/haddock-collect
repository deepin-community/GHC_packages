#!/usr/bin/runhaskell
{-# OPTIONS -Wall #-}

import Data.List
import Data.Maybe
import System.Environment
import System.FilePath

type URL = String

-- copy from hoogle/src/Recipe/Hackage.hs
haddockPackageUrl :: URL -> [String] -> [String]
haddockPackageUrl x = concatMap f
    where f y | "@package " `isPrefixOf` y = ["@url " ++ x, y]
              | otherwise = [y]
-- copy end

filterHaddock :: URL -> String -> String
filterHaddock url = unlines . haddockPackageUrl url . lines

readAndPrint :: FilePath -> FilePath -> FilePath -> IO ()
readAndPrint strip outdir file = do
  f <- readFile file
  writeFile outfile $ filterHaddock url f
    where outfile = outdir </> takeFileName file
          url = normalise $ "file:/" ++ (fromMaybe "" . stripPrefix strip . dropFileName $ file)

usage :: IO ()
usage = putStrLn "Usage: echo SOMEWHERE/HOOGLE_DATABASE.txt | haddock-collect STRIP OUTDIR"

main :: IO ()
main = do
  a <- getArgs
  if a == [] || a == ["-h"] || length a /= 2 then usage
    else do c <- getContents
            mapM_ (readAndPrint (a !! 0) (a !! 1)) (lines c)
