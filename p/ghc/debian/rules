#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess.
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# From /usr/share/doc/autotools-dev/examples/rules.gz:
export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += --build $(DEB_HOST_GNU_TYPE)
else
  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

ProjectVersion=$(shell awk -F\' "/^PACKAGE_VERSION='[0-9.]+'\$$/ { print \$$2 }" configure)

GHC=$(firstword $(shell bash -c "type -p ghc6 ghc"))
EXTRA_CONFIGURE_FLAGS=--with-ghc="$(GHC)"

VARFILE=/usr/lib/haskell-utils/ghc6_vars

build: build-stamp
build-stamp:
	dh_testdir

	touch configure

	rm -f mk/build.mk
	echo "XMLDocWays := html" >> mk/build.mk
	echo "GhcRTSWays += debug_p thr_debug thr_debug_p" >> mk/build.mk
	echo "XSLTPROC_OPTS += --nonet" >> mk/build.mk
ifeq '$(findstring $(shell dpkg-architecture -qDEB_HOST_ARCH), i386 amd64)' ''
	echo "GhcUnregisterised=YES" >> mk/build.mk
	echo "GhcWithNativeCodeGen=NO" >> mk/build.mk
	echo "GhcWithInterpreter=NO" >> mk/build.mk
	echo "SplitObjs=NO" >> mk/build.mk
	# The threaded RTS doesn't seem happy on non-x86/amd64
	echo 'GhcRTSWays := $$(shell echo $$(GhcRTSWays) | sed "s/\<[a-z_]*thr[a-z_]*\>//g")' >> mk/build.mk
	echo "GhcNotThreaded=YES" >> mk/build.mk
endif
ifneq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -Rghc-timing -DDEBUG" >> mk/build.mk
	echo "GhcLibHcOpts  += -O -dcore-lint -keep-hc-files " >> mk/build.mk
	echo "SplitObjs     = NO" >> mk/build.mk
	echo "STRIP         = :" >> mk/build.mk
endif
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -O0" >> mk/build.mk
	# This breaks the build - to be investigated:
	# echo "GhcLibHcOpts  += -O0" >> mk/build.mk
	echo "GhcRtsCcOpts  += -O0" >> mk/build.mk
endif
	rm -f config.sub
	rm -f config.guess
	ln -s /usr/share/misc/config.sub .
	ln -s /usr/share/misc/config.guess .
	./configure $(confflags) --prefix=/usr --bindir='$${libdir}/bin' $(EXTRA_CONFIGURE_FLAGS)
	$(MAKE)

	rm -rf debian/test-build
	mkdir debian/test-build
	echo 'main = putStrLn "Foo"' > debian/test-build/foo.hs
	compiler/stage2/ghc-inplace debian/test-build/foo.hs -o debian/test-build/foo
	[ "$$(debian/test-build/foo)" = "Foo" ]
	rm debian/test-build/*
	echo 'main = putStrLn "Foo"' > debian/test-build/foo.hs
	compiler/stage2/ghc-inplace debian/test-build/foo.hs -o debian/test-build/foo -O2
	[ "$$(debian/test-build/foo)" = "Foo" ]
	rm debian/test-build/*

	ProjectVersion=$(ProjectVersion) $(MAKE) -f debian/scripts.mk all
	# Put some entities before the <?xml tag and then manpagify flags.xml
	{ head -1 docs/users_guide/flags.xml; \
	  echo "<!DOCTYPE sect1 [<!ENTITY ndash  \"-\"> \
	                         <!ENTITY ldquo  \"\`\"> \
	                         <!ENTITY rdquo  \"'\">]>"; \
	  tail -n +2 docs/users_guide/flags.xml; } \
	      | xsltproc debian/flags.xsl - > debian/ghc6.1
	for m in ghci6 ghc-$(ProjectVersion) ghci-$(ProjectVersion); do echo ".so man1/ghc6.1" > debian/$$m.1; done
	cp utils/hp2ps/hp2ps.1 debian/hp2ps-ghc6.1
	echo debian/*.1 > debian/ghc6.manpages

	touch build-stamp

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	echo "readline=`grep-status -r -FProvides '\<libreadline-dev\>' -a -FStatus installed -s Package -n | tr '\n' ,`" >> debian/ghc6.substvars

	# Install the basic stuff
	$(MAKE) prefix=`pwd`/debian/tmp/usr install
	$(MAKE) prefix=`pwd`/debian/ghc6-doc/usr \
	    datadir='$${prefix}/share/doc/ghc6-doc' install-docs
	cd libraries && find . \( -type f -o -type l \) \
	                       \( -name "*.hs" -o -name "*.lhs" \) -print0 \
	    | cpio -updV0 ../debian/ghc6-libsrc/usr/share/doc/ghc6-libsrc

	# Put all the profiling files in ghc6-prof
	find debian/tmp \( -type f -o -type l \) \
	                \( -name "*.p_hi" -o -name "*_p.a" \) \
	    > debian/ghc6-prof.install
	# Take anything left and put it in ghc6 itself
	{ find debian/tmp -type f -o -type l ; \
	  cat debian/ghc6-prof.install; \
	  cat debian/ghc6-prof.install; } \
	    | sort | uniq -u > debian/ghc6.install
	dh_install
	/usr/bin/install -c -m 755 -d debian/ghc6/usr/bin

	# Sort out the package.conf files
	mv debian/ghc6/usr/lib/ghc-$(ProjectVersion)/package.conf \
	   debian/ghc6/usr/lib/ghc-$(ProjectVersion)/package.conf.shipped
	PACKAGE=`utils/ghc-pkg/ghc-pkg-inplace list -f debian/ghc6/usr/lib/ghc-$(ProjectVersion)/package.conf.shipped | perl -ne 'print if $$foo; $$foo = 1 if /^debian/' | tr '\n,A-Z' '  a-z' | sed -e "s/([^)]*)//g" -e "s/-[0-9]\+\(\.[0-9]\+\)*//g" -e "s/^ *//" -e "s/ *$$//" -e "s/  */, /g"`; \
	    { echo -n "provided-devs="; \
	      echo "$$PACKAGE" | sed -e "s/\([a-z0-9.-]\+\)/libghc6-\1-dev/g"; } \
	          >> debian/ghc6.substvars; \
	    { echo -n "provided-profs="; \
	      echo "$$PACKAGE" | sed -e "s/\([a-z0-9.-]\+\)/libghc6-\1-prof/g"; } \
	          >> debian/ghc6-prof.substvars

	# Sort out the binaries
	cd debian/ghc6/usr/lib/ghc-$(ProjectVersion)/bin && \
	    for f in *-$(ProjectVersion); \
	    do ln -s /usr/lib/ghc-$(ProjectVersion)/bin/$$f \
	             ../../../bin/; \
	    done
	cd debian/ghc6/usr/lib/ghc-$(ProjectVersion)/bin && \
	    for f in *; \
	    do ln -s /usr/lib/ghc-$(ProjectVersion)/bin/$$f \
	             ../../../bin/$${f}6; \
	    done
	rm -f debian/ghc6/usr/bin/*-$(ProjectVersion)6
	rm -f debian/ghc6/usr/bin/runhaskell6

	/usr/bin/install -c -m 755 -d debian/ghc6/`dirname $(VARFILE)`
	echo 'ghc6_arches="alpha amd64 hppa i386 ia64 kfreebsd-i386 m68k powerpc ppc64 s390 sparc"' > debian/ghc6/$(VARFILE)
	echo 'ghc6_lib_bdeps="ghc6 (>= $(ProjectVersion)) [$$ghc6_arches], ghc6 (<< $(ProjectVersion)+) [$$ghc6_arches]"' >> debian/ghc6/$(VARFILE)
	echo 'ghc6_lib_deps="ghc6 (>= $(ProjectVersion)), ghc6 (<< $(ProjectVersion)+)"' >> debian/ghc6/$(VARFILE)
	echo 'ghc6_app_bdeps="ghc6 [$$ghc6_arches]"' >> debian/ghc6/$(VARFILE)

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp

	touch configure
	
	-$(MAKE) distclean
	rm -f config.sub config.guess
	rm -f debian/*.install
	rm -f debian/*.1
	rm -f debian/ghc6.manpages
	rm -f mk/build.mk
	$(MAKE) -f debian/scripts.mk clean
	rm -rf debian/test-build

	# Hacks:
	rm -f compiler/stage2/ghc-6.6
	rm -f libraries/readline/config.status
	rm -f compiler/stage1/ghc_boot_platform.h
	rm -f compiler/stage2/ghc_boot_platform.h
	rm -rf libraries/html-docs/

	dh_clean

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
	dh_installmenu
#	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installcatalogs
#	dh_installpam
#	dh_installmime
#	dh_installinit
	dh_installman
#	dh_installcron
#	dh_installinfo
#	dh_undocumented
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
#	dh_perl
#	dh_python
#	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	make -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build install clean binary-indep binary-arch binary-common binary
