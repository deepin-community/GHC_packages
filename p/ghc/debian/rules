#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess.
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# From /usr/share/doc/autotools-dev/examples/rules.gz:
export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
export DEB_HOST_ARCH      ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
# Commented out for now.  The build scripts don't recognise i486 as an
# architecture and cross compiling isn't supported anyway.
#ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
#  confflags += --build $(DEB_HOST_GNU_TYPE)
#else
#  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
#endif

ProjectVersion=$(shell awk -F\' "/^PACKAGE_VERSION='[0-9.]+'\$$/ { print \$$2 }" configure)

GHC=$(firstword $(shell bash -c "type -p ghc6 ghc"))
EXTRA_CONFIGURE_FLAGS=--with-ghc="$(GHC)"
BUILD_HADDOCK_DOCS=YES

configure: configure-stamp
configure-stamp:
	dh_testdir

	touch configure

	rm -f mk/build.mk
	echo "SRC_HC_OPTS += -lffi" >> mk/build.mk
	echo "HADDOCK_DOCS := YES" >> mk/build.mk
	echo "XSLTPROC_OPTS += --nonet" >> mk/build.mk
ifneq (,$(findstring $(DEB_HOST_ARCH), i386 amd64 kfreebsd-i386 kfreebsd-amd64 powerpc))
	echo "GhcUnregisterised=NO" >> mk/build.mk
else
	echo "GhcUnregisterised=YES" >> mk/build.mk
endif
ifeq (powerpc,$(DEB_HOST_ARCH)) # See #365497
	echo "GhcWithInterpreter=NO" >> mk/build.mk
endif
ifeq (ia64,$(DEB_HOST_ARCH)) # Tested and seen to be necessary with 6.12.1
	echo "SRC_CC_OPTS += -Wl,--relax" >> mk/build.mk
	echo "SRC_HC_OPTS += -optl-Wl,--relax -optl-Wl,-G0" >> mk/build.mk
	echo "SRC_HC_OPTS += -optc-G0" >> mk/build.mk
endif
ifneq (,$(findstring $(DEB_HOST_ARCH), kfreebsd-i386 kfreebsd-amd64))
	echo "GhcWithInterpreter=YES"
endif
ifneq (,$(findstring $(DEB_HOST_ARCH), arm armel alpha))
	echo "UseLibFFIForAdjustors=YES" >> mk/build.mk
endif
ifneq (,$(findstring $(DEB_HOST_ARCH), arm armel))
	echo "SRC_HC_OPTS     += -optc-mlong-calls" >> mk/build.mk
endif
ifneq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -Rghc-timing -DDEBUG" >> mk/build.mk
	echo "GhcLibHcOpts  += -O -dcore-lint -keep-hc-files " >> mk/build.mk
	echo "SplitObjs     = NO" >> mk/build.mk
	echo "STRIP         = :" >> mk/build.mk
endif
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -O0" >> mk/build.mk
	# This breaks the build - to be investigated:
	# echo "GhcLibHcOpts  += -O0" >> mk/build.mk
	echo "GhcRtsCcOpts  += -O0" >> mk/build.mk
endif
	# We can't do this with a configure flag in 6.8.1 as libdir is not
	# defined at the point at which we := it
	echo 'bindir  := $${ghclibdir}/bin' >> mk/build.mk
	echo 'ghclibexecdir := $${ghclibdir}/lib' >> mk/build.mk
	# docdir doesn't have a configure flag, and unfortunately
	# we also need to explicitly define all of its dependents as they
	# are set with :=
	echo 'docdir  := $$(datarootdir)/doc/ghc6-doc' >> mk/build.mk
	echo 'htmldir := $$(docdir)'                   >> mk/build.mk
	echo 'dvidir  := $$(docdir)'                   >> mk/build.mk
	echo 'pdfdir  := $$(docdir)'                   >> mk/build.mk
	echo 'psdir   := $$(docdir)'                   >> mk/build.mk
	rm -f config.sub
	rm -f config.guess
	ln -s /usr/share/misc/config.sub .
	ln -s /usr/share/misc/config.guess .
	./configure $(confflags) --prefix=/usr $(EXTRA_CONFIGURE_FLAGS)

	touch $@

build: build-stamp
build-stamp: configure-stamp
	dh_testdir
	sh debian/watcher.sh "$$PPID" "`pwd`" "`pwd`/build-stamp" 'ghc\|gcc' &
	$(MAKE)

	# Do some very simple tests that the compiler actually works
	rm -rf debian/testghc
	mkdir debian/testghc
	echo 'main = putStrLn "Foo"' > debian/testghc/foo.hs
	inplace/bin/ghc-stage2 debian/testghc/foo.hs -o debian/testghc/foo
	[ "$$(debian/testghc/foo)" = "Foo" ]
	rm debian/testghc/*
	echo 'main = putStrLn "Foo"' > debian/testghc/foo.hs
	inplace/bin/ghc-stage2 debian/testghc/foo.hs -o debian/testghc/foo -O2
	[ "$$(debian/testghc/foo)" = "Foo" ]
	rm debian/testghc/*

# build haddock separately and hard code paths according to install paths
	cp -r utils/haddock debian
	sed -i s/@PROJECTVERSION@/$(ProjectVersion)/ debian/haddock/src/Main.hs
	cd debian/haddock; ../../inplace/bin/ghc-stage2 --make Setup.lhs; ./Setup configure --prefix=/usr --with-compiler=../../inplace/bin/ghc-stage2 --package-db=../../inplace/lib/package.conf.d/; ./Setup build

	touch $@

FILES = \( -type f -o -type l \)
PROF_FILE = \( -name "*.p_*" -o -name "lib*_p.a" \)

install: install-stamp
install-stamp: build-stamp
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs /var/lib/ghc-$(ProjectVersion)/package.conf.d

	# Install the basic stuff
	$(MAKE) DESTDIR=$(CURDIR)/debian/tmp install

	# Delete all the library LICENSE files
	rm -f debian/tmp/usr/share/doc/ghc6-doc/html/libraries/*/LICENSE

	# Generate lintian overrides
	mkdir -p debian/tmp/usr/share/lintian/overrides
	echo "ghc6 binary: extra-license-file `cd debian/tmp && echo usr/lib/ghc-*/Cabal-*/Distribution/License.hi`" >> debian/tmp/usr/share/lintian/overrides/ghc6
	echo "ghc6: extra-license-file `cl debian/tmp && echo usr/lib/ghc-*/Cabal-*/Distribution/License.dyn_hi`" >> debian/tmp/usr/share/lintian/overrides/ghc6
	echo "ghc6-prof binary: extra-license-file `cd debian/tmp && echo usr/lib/ghc-*/Cabal-*/Distribution/License.p_hi`" >> debian/tmp/usr/share/lintian/overrides/ghc6-prof

	# Sort out the package.conf files
	ln -s debian/tmp/var/lib/ghc-$(ProjectVersion)/package.conf \
	      debian/tmp/usr/lib/ghc-$(ProjectVersion)/package.conf
	mkdir -p debian/tmp/var/lib/ghc-$(ProjectVersion)
	mv debian/tmp/usr/lib/ghc-$(ProjectVersion)/package.conf.d \
	   debian/tmp/var/lib/ghc-$(ProjectVersion)/
	ln -s debian/tmp/var/lib/ghc-$(ProjectVersion)/package.conf.d \
	      debian/tmp/usr/lib/ghc-$(ProjectVersion)/package.conf.d
	chmod +x debian/provided_substvars
	debian/provided_substvars
	sed -ri 's,^haddock-interfaces: /.*?/libraries/,haddock-interfaces: /usr/lib/ghc-$(ProjectVersion)/haddock/,' debian/tmp/var/lib/ghc-$(ProjectVersion)/package.conf.d/*.conf

	# Sort out the binaries
	mkdir -p debian/tmp/usr/bin
	if inplace/bin/ghc-stage2 --info | grep '"Have interpreter","NO"'; then \
	    cd debian/tmp/usr/lib/ghc-$(ProjectVersion) ;rm -f bin/ghci* bin/runghc* bin/runhaskell*; \
	fi
	rm -f debian/tmp/usr/lib/ghc-$(ProjectVersion)/bin/haddock
	cd debian/tmp/usr/lib/ghc-$(ProjectVersion)/bin && \
	    for f in *-$(ProjectVersion); \
	    do ln -s /usr/lib/ghc-$(ProjectVersion)/bin/$$f \
	             ../../../bin/; \
	    done
	cd debian/tmp/usr/lib/ghc-$(ProjectVersion)/bin && \
	    for f in *; \
	    do ln -s /usr/lib/ghc-$(ProjectVersion)/bin/$$f \
	             ../../../bin/$${f}6; \
	    done
	rm -f debian/tmp/usr/bin/*-$(ProjectVersion)6
	rm -f debian/tmp/usr/bin/runhaskell6
	sed -i 's,topdir="/usr/lib,topdir="/var/lib,' debian/tmp/usr/lib/ghc-$(ProjectVersion)/bin/ghc-pkg-$(ProjectVersion)
	cd debian/haddock; ./Setup copy --dest=../tmp

	ProjectVersion=$(ProjectVersion) $(MAKE) -f debian/scripts.mk all

ifeq (YES,$(BUILD_HADDOCK_DOCS))
	mkdir -p debian/tmp/usr/lib/ghc6-doc
	cp debian/gen_contents_index debian/tmp/usr/lib/ghc6-doc/
	chmod +x debian/tmp/usr/lib/ghc6-doc/gen_contents_index
	mkdir debian/tmp/usr/lib/ghc-$(ProjectVersion)/haddock/
	for f in `find debian/tmp/usr/share/doc/ghc6-doc/html/libraries/ -maxdepth 1 -mindepth 1 -type d`; do \
	    mkdir debian/tmp/usr/lib/ghc-$(ProjectVersion)/haddock/`basename $$f` ; \
	    mv $$f/*.haddock debian/tmp/usr/lib/ghc-$(ProjectVersion)/haddock/`basename $$f` ; done
	cd debian/tmp/usr/share/doc/ghc6-doc/html/libraries/; ln -s ghc-$(ProjectVersion) ghc
endif

	# manpages
	echo ".so man1/ghc6.1" > debian/ghc-$(ProjectVersion).1
	if test -e debian/tmp/usr/bin/ghci-$(ProjectVersion); then \
	    echo ".so man1/ghc6.1" > debian/ghci6.1 ;\
	    echo ".so man1/ghc6.1" > debian/ghci-$(ProjectVersion).1 ;\
	    cp debian/runghc.man debian/runghc6.1 ; fi
	mv debian/tmp/usr/share/man/man1/ghc.1 debian/ghc6.1
	cp utils/hp2ps/hp2ps.1 debian/hp2ps-ghc6.1
	cp debian/ghc-pkg6.man debian/ghc-pkg6.1
	cp debian/haddock.man debian/tmp/usr/share/man/man1/haddock.1

	echo debian/*.1 > debian/ghc6.manpages

	# ####################
	# Now all the files are sorted, create the package filelists

	# ghc6
	find debian/tmp/usr/bin $(FILES)                  > debian/ghc6.install
#	find debian/tmp/usr/share/ghc* $(FILES)          >> debian/ghc6.install
	find debian/tmp/usr/share/man $(FILES)           >> debian/ghc6.install
	find debian/tmp/usr/lib/ghc-$(ProjectVersion) $(FILES) ! $(PROF_FILE)  >> debian/ghc6.install
	find debian/tmp/var				 >> debian/ghc6.install
	echo debian/tmp/usr/share/lintian/overrides/ghc6 >> debian/ghc6.install
	# ghc6-prof
	find debian/tmp/usr/lib $(FILES) $(PROF_FILE) > debian/ghc6-prof.install
	echo debian/tmp/usr/share/lintian/overrides/ghc6-prof >> debian/ghc6-prof.install
	# ghc6-doc
ifeq (YES,$(BUILD_HADDOCK_DOCS))
	find debian/tmp/usr/share/doc/ghc6-doc $(FILES) > debian/ghc6-doc.install
	find debian/tmp/usr/share/haddock* $(FILES)    >> debian/ghc6-doc.install
	find debian/tmp/usr/lib/ghc6-doc $(FILES)      >> debian/ghc6-doc.install
endif
	sed -i s,^debian/tmp,, debian/*.install
	rm -f debian/ghc6.links
	echo "/var/lib/ghc-$(ProjectVersion)/package.conf.d /usr/lib/ghc-$(ProjectVersion)/package.conf.d" >> debian/ghc6.links
	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f configure-stamp build-stamp install-stamp binary-arch-stamp binary-indep-stamp

	touch configure

	$(MAKE) distclean
	rm -f config.sub config.guess
	rm -f debian/*.install
	rm -f debian/*.1 debian/ghc-pkg6.man
	rm -f debian/ghc6.manpages
	rm -f mk/build.mk
	$(MAKE) -f debian/scripts.mk clean
	rm -rf debian/testghc
	rm -f ch01.html ch02.html index.html
	rm -rf debian/haddock

	# Hacks:
	rm -f config.log
	rm -f libraries/ghc-prim/GHC/PrimopWrappers.hs
	rm -f libraries/ghc-prim/GHC/Prim.hs
	rm -f rts/libs.depend mk/install.mk

	rm -f libraries/haskeline/a.out

	dh_clean

binary-arch: binary-arch-stamp
binary-arch-stamp: install-stamp
	dh_testdir
	dh_testroot
	dh_installchangelogs -a
	dh_installdocs -a
	dh_installexamples -a
	dh_install -a
	dh_installmenu -a
	dh_installman -a
	dh_strip
	dh_link -a
	dh_compress -X.haddock -a
	dh_fixperms -a
	dh_installdeb -a
	dh_shlibdeps -XlibHS
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a
	touch $@

# binary-indep and binary-arch both build everything, as otherwise
# "dh_install --fail-missing" falls over

# Build architecture independant packages using the common target.
binary-indep: binary-indep-stamp
binary-indep-stamp: install-stamp
	dh_testdir
	dh_testroot
	dh_installchangelogs -i
	dh_installdocs -i
	dh_installexamples -i
	dh_install -i
	dh_installmenu -i
	dh_installman -i
	dh_link -i
	dh_compress -X.haddock -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i
	touch $@

binary: binary-indep binary-arch
.PHONY: build install clean binary-indep binary-arch binary-common binary patch
