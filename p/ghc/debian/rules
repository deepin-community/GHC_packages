#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# This file is public domain software, originally written by Joey Hess.
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.

# Uncomment this to turn on verbose mode. 
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

# From /usr/share/doc/autotools-dev/examples/rules.gz:
export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += --build $(DEB_HOST_GNU_TYPE)
else
  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

include ghc/mk/version.mk

GHC=$(firstword $(shell bash -c "type -p ghc6 ghc5 ghc"))
EXTRA_CONFIGURE_FLAGS=--with-ghc="$(GHC)"

VARFILE=/usr/lib/haskell-utils/ghc6_vars

build: build-stamp
build-stamp:
	dh_testdir

	touch configure
	chmod +x debian/xmlise-flags.sgml

	echo "readline=`grep-status -r -FProvides '\<libreadline-dev\>' -a -FStatus installed -s Package -n | tr '\n' ,`" >> debian/ghc6.substvars

	echo "SGMLDocWays   := html dvi ps" > mk/build.mk
	echo "GhcRTSWays += debug_p thr_debug thr_debug_p" >> mk/build.mk
ifeq '$(findstring $(shell dpkg-architecture -qDEB_HOST_ARCH), i386 sparc)' ''
	echo "GhcUnregisterised=YES" >> mk/build.mk
	echo "SplitObjs=NO" >> mk/build.mk
endif
ifneq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -Rghc-timing -DDEBUG" >> mk/build.mk
	echo "GhcLibHcOpts  += -O -dcore-lint -keep-hc-files " >> mk/build.mk
	echo "SplitObjs     = NO" >> mk/build.mk
	echo "STRIP         = :" >> mk/build.mk
endif
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	echo "SRC_HC_OPTS   += -H32m -O0" >> mk/build.mk
	echo "GhcHcOpts     += -O0" >> mk/build.mk
	# This breaks the build - to be investigated:
	# echo "GhcLibHcOpts  += -O0" >> mk/build.mk
	echo "GhcRtsCcOpts  += -O0" >> mk/build.mk
endif
	rm -f config.sub
	rm -f config.guess
	ln -s /usr/share/misc/config.sub .
	ln -s /usr/share/misc/config.guess .
	./configure $(confflags) --enable-hopengl --prefix=/usr --bindir='$${libdir}/bin' $(EXTRA_CONFIGURE_FLAGS)
	$(MAKE)

	mkdir debian/test-build
	echo 'main = putStrLn "Foo"' > debian/test-build/foo.hs
	ghc/compiler/ghc-inplace debian/test-build/foo.hs -o debian/test-build/foo
	[ "$$(debian/test-build/foo)" = "Foo" ]                    
	rm debian/test-build/*
	echo 'main = putStrLn "Foo"' > debian/test-build/foo.hs
	ghc/compiler/ghc-inplace debian/test-build/foo.hs -o debian/test-build/foo -O2
	[ "$$(debian/test-build/foo)" = "Foo" ]

	$(MAKE) -f debian/scripts.mk all
	debian/xmlise-flags.sgml
	xsltproc debian/flags.xsl ghc/docs/users_guide/flags.xml > debian/ghc6.1
	for m in ghci6 ghc-$(ProjectVersion) ghci-$(ProjectVersion); do echo ".so man1/ghc6.1" > debian/$$m.1; done
	cp ghc/utils/hp2ps/hp2ps.1 debian/hp2ps-ghc6.1
	echo debian/*.1 > debian/ghc6.manpages

	touch build-stamp

	dh_installdirs

	$(MAKE) prefix=`pwd`/debian/tmp/usr install GhcLibsWithOpenGL=NO GhcLibsWithGLUT=NO
	$(MAKE) prefix=`pwd`/debian/ghc6-hopengl/usr -C libraries/OpenGL install
	$(MAKE) prefix=`pwd`/debian/ghc6-hopengl/usr -C libraries/GLUT   install
	$(MAKE) prefix=`pwd`/debian/ghc6-doc/usr datadir='$${prefix}/share/doc/ghc6-doc' install-docs
	cd libraries && find . \( -name "*.hs" -o -name "*.lhs" \) -print0 | cpio -updV0 ../debian/ghc6-libsrc/usr/share/doc/ghc6-libsrc
	cd hslibs    && find . \( -name "*.hs" -o -name "*.lhs" \) -print0 | cpio -updV0 ../debian/ghc6-libsrc/usr/share/doc/ghc6-libsrc

	find debian/tmp -type f    -name "*.p_hi"    \
	                       -o  -name "*_p.a"     \
	                                        > debian/ghc6-prof.install
	find debian/tmp \( -type f -o -type l \) !  -name "*.p_hi"    \
	                                         !  -name "*_p.a"     \
	                                        > debian/ghc6.install
	dh_install
	/usr/bin/install -c -m 755 -d debian/ghc6/usr/bin
	mv debian/ghc6/usr/lib/ghc-$(ProjectVersion)/package.conf \
	   debian/ghc6/usr/lib/ghc-$(ProjectVersion)/package.conf.shipped
	ln -s /usr/lib/ghc-$(ProjectVersion)/bin/ghc     debian/ghc6/usr/bin/ghc6
	ln -s /usr/lib/ghc-$(ProjectVersion)/bin/ghc-pkg debian/ghc6/usr/bin/ghc-pkg6
	ln -s /usr/lib/ghc-$(ProjectVersion)/bin/ghci    debian/ghc6/usr/bin/ghci6
	for f in ghc ghc-pkg ghci; do ln -s /usr/lib/ghc-$(ProjectVersion)/bin/$$f-$(ProjectVersion) debian/ghc6/usr/bin/; done

	/usr/bin/install -c -m 755 -d debian/ghc6/`dirname $(VARFILE)`
	echo 'ghc6_arches="alpha amd64 hppa i386 ia64 m68k powerpc s390 sparc"' > debian/ghc6/$(VARFILE)
	echo 'ghc6_lib_bdeps="ghc6 (>= $(ProjectVersion)) [$$ghc6_arches], ghc6 (<< $(ProjectVersion)+) [$$ghc6_arches]"' >> debian/ghc6/$(VARFILE)
	echo 'ghc6_lib_deps="ghc6 (>= $(ProjectVersion)), ghc6 (<< $(ProjectVersion)+)"' >> debian/ghc6/$(VARFILE)
	echo 'ghc6_app_bdeps="ghc6 [$$ghc6_arches]"' >> debian/ghc6/$(VARFILE)

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp

	touch configure
	
	-$(MAKE) distclean
	find . -type l -print0 | xargs -0 rm -f
	rm -f mk/config.mk mk/config.h mk/stamp-h
	rm -f hslibs/doc/hslibs.out ghc/docs/users_guide/users_guide.out
	rm -f ghc/driver/package.conf.inplace.old ghc/driver/package.conf.old
	rm -f debian/ghc6.install debian/ghc6-prof.install
	rm -f debian/*.1
	rm -f debian/ghc6.manpages
	rm -f ghc/docs/users_guide/flags.xml
	rm -f mk/build.mk
	rm -f docs/building/building.out docs/docbook-cheat-sheet/docbook-cheat-sheet.out
	rm -rf debian/test-build
	$(MAKE) -f debian/scripts.mk clean

	dh_clean

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
	dh_installmenu
#	dh_installdebconf
#	dh_installlogrotate
#	dh_installemacsen
#	dh_installcatalogs
#	dh_installpam
#	dh_installmime
#	dh_installinit
	dh_installman
#	dh_installcron
#	dh_installinfo
#	dh_undocumented
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
#	dh_perl
#	dh_python
#	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build
	make -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary-common binary
