Index: frown-0.6.1/Main.lhs
===================================================================
--- frown-0.6.1.orig/Main.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Main.lhs	2012-03-15 14:21:07.000000000 +0100
@@ -53,11 +53,12 @@
 > import Prettier               hiding (  string, concat  )
 > import qualified Prettier as PP
 > import qualified SearchTree as ST
-> import Monad                  (  when  )
-> import Directory
-> import IO
-> import System
+> import Control.Monad                  (  when  )
+> import System.Directory
+> import System.IO
 > import System.Console.GetOpt
+> import System.Exit
+> import System.Environment
 
 %-------------------------------=  --------------------------------------------
 \section{The main program}
@@ -689,4 +690,4 @@
                                  | let add op = ADDOP (op :: Addop)
                                  | let id  s  = IDENT (s :: String);
 
-   |add op| serves as an abbreviation for |ADDOP op|.
\ No newline at end of file
+   |add op| serves as an abbreviation for |ADDOP op|.
Index: frown-0.6.1/Base.lhs
===================================================================
--- frown-0.6.1.orig/Base.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Base.lhs	2012-03-15 14:20:13.000000000 +0100
@@ -36,9 +36,9 @@
 > where
 >
 > import Prettier
-> import Monad                  (  MonadPlus(..)  )
-> import IO
-> import System
+> import Control.Monad          (  MonadPlus(..)  )
+> import System.Exit
+> import System.IO
 
 %-------------------------------------------------------------------------------
 \subsection{List utilities}
Index: frown-0.6.1/Case.lhs
===================================================================
--- frown-0.6.1.orig/Case.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Case.lhs	2012-03-15 14:16:03.000000000 +0100
@@ -45,10 +45,10 @@
 > import MergeSort
 > import Base
 > import Options
-> import Maybe
-> import IO
-> import Monad
-> import List                   (  partition  )
+> import Data.Maybe
+> import System.IO
+> import Control.Monad
+> import Data.List              (  partition  )
 > import Prelude                hiding (  lookup  )
 
 %-------------------------------=  --------------------------------------------
@@ -347,4 +347,4 @@
 > actions'                      :: Symbol -> Past -> Past
 > actions' x (Node es ts)       =  Node [ a{ future = f } | a <- es
 >                                                         , Just f <- [lookup (future a) x] ]
->                                       [ (e, actions' x t) | (e, t) <- ts ]
\ No newline at end of file
+>                                       [ (e, actions' x t) | (e, t) <- ts ]
Index: frown-0.6.1/Compact.lhs
===================================================================
--- frown-0.6.1.orig/Compact.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Compact.lhs	2012-03-15 14:19:05.000000000 +0100
@@ -49,9 +49,9 @@
 > import Base
 > import Generate
 > import MergeSort
-> import Char
-> import IO
-> import Maybe
+> import Data.Char
+> import System.IO
+> import Data.Maybe
 > import Prelude                hiding (  lookup  )
 
 %-------------------------------=  --------------------------------------------
@@ -444,4 +444,4 @@
 
 >     wrap s                    =  prefix opts ++ s ++ suffix opts
 >     wrap_var s                =  var (wrap s)
->     wrap_con s                =  con (wrap s)
\ No newline at end of file
+>     wrap_con s                =  con (wrap s)
Index: frown-0.6.1/Convert.lhs
===================================================================
--- frown-0.6.1.orig/Convert.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Convert.lhs	2012-03-15 14:16:45.000000000 +0100
@@ -42,13 +42,13 @@
 > import OrdUniqListSet         (  Set, MinView(Empty, Min)  ) -- for nhc98
 > import Atom                   hiding (  string  )
 > import Haskell                hiding (  Empty, Decl, guard  )
-> import Maybe
-> import List
+> import Data.Maybe
+> import Data.List
 > import Base
 > import Prettier               hiding (  concat, intersperse  )
 > import qualified Prettier as PP
-> import Monad
-> import IO                     hiding (  isEOF  )
+> import Control.Monad
+> import System.IO              hiding (  isEOF  )
 > import Options
 
 > newEOF                        :: Ident
@@ -361,4 +361,4 @@
 >           | terminal w        =  w
 >           | otherwise         =  case lookup w bindings of
 >                                      Just w' -> w' { attributes = attributes w }
->                                      Nothing -> updateArgs w (map substitute (arguments w))
\ No newline at end of file
+>                                      Nothing -> updateArgs w (map substitute (arguments w))
Index: frown-0.6.1/GParser2.hs
===================================================================
--- frown-0.6.1.orig/GParser2.hs	2005-12-15 10:09:24.000000000 +0100
+++ frown-0.6.1/GParser2.hs	2012-03-15 14:20:37.000000000 +0100
@@ -47,9 +47,9 @@
   import qualified Base
   import Prettier               (  Pretty  )
   import Options
-  import Char
-  import List
-  import IO
+  import Data.Char              hiding ( isSymbol )
+  import Data.List
+  import System.IO
 
 
 
@@ -2258,4 +2258,4 @@
       where verb                =  verbose opts
  
   run                           :: (Monad m) => Lex m Answer -> (String -> m Answer)
-  run parser inp                =  unLex parser (\a _ _ _ _ -> return a) False inp 1 (take 1 (lines inp))
\ No newline at end of file
+  run parser inp                =  unLex parser (\a _ _ _ _ -> return a) False inp 1 (take 1 (lines inp))
Index: frown-0.6.1/GParser2.lg
===================================================================
--- frown-0.6.1.orig/GParser2.lg	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/GParser2.lg	2012-03-15 14:18:08.000000000 +0100
@@ -47,9 +47,9 @@
 > import qualified Base
 > import Prettier               (  Pretty  )
 > import Options
-> import Char
-> import List
-> import IO
+> import Data.Char
+> import Data.List
+> import System.IO
 
 % - - - - - - - - - - - - - - - = - - - - - - - - - - - - - - - - - - - - - - -
 \subsection{Abstract syntax}
@@ -481,4 +481,4 @@
 >     where verb                =  verbose opts
 >
 > run                           :: (Monad m) => Lex m Answer -> (String -> m Answer)
-> run parser inp                =  unLex parser (\a _ _ _ _ -> return a) False inp 1 (take 1 (lines inp))
\ No newline at end of file
+> run parser inp                =  unLex parser (\a _ _ _ _ -> return a) False inp 1 (take 1 (lines inp))
Index: frown-0.6.1/GVStack.lhs
===================================================================
--- frown-0.6.1.orig/GVStack.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/GVStack.lhs	2012-03-15 14:18:51.000000000 +0100
@@ -45,10 +45,10 @@
 > import Options
 > import Base
 > import Generate
-> import IO
-> import Monad
-> import Char
-> import List                   (  maximumBy  )
+> import System.IO
+> import Control.Monad
+> import Data.Char
+> import Data.List              (  maximumBy  )
 > import Prelude                hiding (  lookup  )
 
 %-------------------------------=  --------------------------------------------
Index: frown-0.6.1/Generate.lhs
===================================================================
--- frown-0.6.1.orig/Generate.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Generate.lhs	2012-03-15 14:12:58.000000000 +0100
@@ -43,7 +43,7 @@
 > import OrdUniqListSet         (  Set  )
 > import Base
 > --import Char                   (  toLower, toUpper  )
-> import List                   (  intersperse  )
+> import Data.List              (  intersperse  )
 
 Symbols.
 
Index: frown-0.6.1/Haskell.lhs
===================================================================
--- frown-0.6.1.orig/Haskell.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Haskell.lhs	2012-03-15 14:14:23.000000000 +0100
@@ -35,7 +35,7 @@
 > import Atom                   hiding (  string  )
 > import qualified Atom
 > import Prettier
-> import Char
+> import Data.Char
 > import Prelude                hiding (  concat  )
 
 %-------------------------------=  --------------------------------------------
Index: frown-0.6.1/LR0.lhs
===================================================================
--- frown-0.6.1.orig/LR0.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/LR0.lhs	2012-03-15 14:13:48.000000000 +0100
@@ -45,7 +45,7 @@
 > import Base                   hiding (  list  )
 > import qualified Base
 > import Prelude                hiding (  null  )
-> import IO
+> import System.IO
 > import Options
 
 %-------------------------------=  --------------------------------------------
@@ -269,4 +269,4 @@
 productions such as |Start# : Start, EOF;|.
 
 > errorState                    :: State
-> errorState                    =  State 0 (Set.empty :\/ Set.empty)
\ No newline at end of file
+> errorState                    =  State 0 (Set.empty :\/ Set.empty)
Index: frown-0.6.1/Lexer2.lhs
===================================================================
--- frown-0.6.1.orig/Lexer2.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Lexer2.lhs	2012-03-15 14:14:43.000000000 +0100
@@ -35,9 +35,9 @@
 > module Lexer2
 > where
 > import Prelude
-> import Char
-> import IO
-> import Monad
+> import Data.Char
+> import System.IO
+> import Control.Monad
 > import Base
 > import Options
 
Index: frown-0.6.1/Lib/OrdUniqListFM.lhs
===================================================================
--- frown-0.6.1.orig/Lib/OrdUniqListFM.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Lib/OrdUniqListFM.lhs	2012-03-15 14:14:08.000000000 +0100
@@ -64,8 +64,8 @@
 > import qualified OrdUniqList as OUL
 > import MergeSort		(  mergeSort  )
 > import Prettier               hiding (  empty  )
-> import qualified List
-> import Maybe                  (  fromMaybe  )
+> import qualified Data.List as List
+> import Data.Maybe             (  fromMaybe  )
 
 > infixl 9  !
 > infixl 9  //
@@ -292,4 +292,4 @@
 @prefixLookup@ returns the list of all completions of the given list.
 
  prefixLookup			:: Ord a => FM [a] b -> [a] -> [([a], b)]
- prefixLookup (FM f) s		=  [ b | Assoc b@(a, _)<-f, s `isPrefixOf` a ]
\ No newline at end of file
+ prefixLookup (FM f) s		=  [ b | Assoc b@(a, _)<-f, s `isPrefixOf` a ]
Index: frown-0.6.1/Lib/OrdUniqListSet.lhs
===================================================================
--- frown-0.6.1.orig/Lib/OrdUniqListSet.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Lib/OrdUniqListSet.lhs	2012-03-15 14:19:55.000000000 +0100
@@ -59,8 +59,8 @@
 > import qualified Prelude
 > import qualified OrdUniqList as OUL
 > import Prettier               hiding (  empty  )
-> import qualified List
-> import Monad
+> import qualified Data.List as List
+> import Control.Monad
 
 %-------------------------------------------------------------------------------
 \subsection{Type definitions and instance declarations}
Index: frown-0.6.1/Lookahead.lhs
===================================================================
--- frown-0.6.1.orig/Lookahead.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Lookahead.lhs	2012-03-15 14:16:21.000000000 +0100
@@ -42,9 +42,9 @@
 > import qualified Prettier as PP
 > import Base
 > import Options
-> import IO
-> import Maybe
-> import Monad                  (  when  )
+> import System.IO
+> import Data.Maybe
+> import Control.Monad             (  when  )
 
 %-------------------------------=  --------------------------------------------
 \section{Grouping of actions}
Index: frown-0.6.1/Options.lhs
===================================================================
--- frown-0.6.1.orig/Options.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Options.lhs	2012-03-15 14:12:01.000000000 +0100
@@ -33,8 +33,8 @@
 > where
 > import Base
 > import System.Console.GetOpt
-> import Char
-> import IO
+> import Data.Char
+> import System.IO
 
 %-------------------------------=  --------------------------------------------
 \section{Command line options}
@@ -149,4 +149,4 @@
 >   | otherwise                 =  Signature False
 
 > (<<)                          :: String -> String -> Bool
-> s << t                        =  map toLower s `isPrefix` map toLower t
\ No newline at end of file
+> s << t                        =  map toLower s `isPrefix` map toLower t
Index: frown-0.6.1/SearchTree.lhs
===================================================================
--- frown-0.6.1.orig/SearchTree.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/SearchTree.lhs	2012-03-15 14:11:29.000000000 +0100
@@ -32,7 +32,7 @@
 >                               ,  length, lookup, unsafeLookup  )
 > where
 > import MergeSort		(  mergeSortBy  )
-> import Maybe                  (  fromMaybe  )
+> import Data.Maybe             (  fromMaybe  )
 > import Prelude                hiding (  length, lookup  )
 > import qualified Prelude
 
Index: frown-0.6.1/Stackless.lhs
===================================================================
--- frown-0.6.1.orig/Stackless.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Stackless.lhs	2012-03-15 14:12:44.000000000 +0100
@@ -47,10 +47,10 @@
 > import Base
 > import Generate
 > import MergeSort
-> import Char
-> import Maybe
-> import IO
-> import Monad
+> import Data.Char
+> import Data.Maybe
+> import System.IO
+> import Control.Monad
 > import Prelude                hiding (  lookup  )
 
 Characteristics.
@@ -311,4 +311,4 @@
 
 >     wrap s                    =  prefix opts ++ s ++ suffix opts
 >     wrap_var s                =  var (wrap s)
->     wrap_con s                =  con (wrap s)
\ No newline at end of file
+>     wrap_con s                =  con (wrap s)
Index: frown-0.6.1/Standard.lhs
===================================================================
--- frown-0.6.1.orig/Standard.lhs	2012-03-15 13:09:04.000000000 +0100
+++ frown-0.6.1/Standard.lhs	2012-03-15 14:19:39.000000000 +0100
@@ -47,9 +47,9 @@
 > import Options
 > import Base
 > import Generate
-> import Char
-> import IO
-> import Maybe
+> import Data.Char
+> import System.IO
+> import Data.Maybe
 > import Prelude                hiding (  lookup  )
 
 Characteristics.
@@ -293,4 +293,4 @@
 
 >     wrap s                    =  prefix opts ++ s ++ suffix opts
 >     wrap_var s                =  var (wrap s)
->     wrap_con s                =  con (wrap s)
\ No newline at end of file
+>     wrap_con s                =  con (wrap s)
