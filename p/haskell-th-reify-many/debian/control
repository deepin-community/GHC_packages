Source: haskell-th-reify-many
Priority: extra
Section: haskell
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Christopher Reichert <creichert07@gmail.com>
Build-Depends: debhelper (>= 7.0),
 haskell-devscripts (>= 0.9),
 cdbs,
 ghc,
 ghc-prof,
 libghc-mtl-dev,
 libghc-mtl-prof,
 libghc-safe-dev,
 libghc-safe-prof,
 libghc-th-expand-syns-dev,
 libghc-th-expand-syns-prof,
Build-Depends-Indep: ghc-doc,
 libghc-mtl-doc,
 libghc-safe-doc,
 libghc-th-expand-syns-doc,
Standards-Version: 3.9.6
Homepage: http://hackage.haskell.org/package/th-reify-many
X-Description: Recurseively reify template haskell datatype info
 @th-reify-many@ provides functions for recursively reifying top
 level declarations.  The main intended use case is for enumerating
 the names of datatypes reachable from an initial datatype, and
 passing these names to some function which generates instances.
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-th-reify-many
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-th-reify-many

Package: libghc-th-reify-many-dev
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
  ${haskell:LongDescription}
  .
  ${haskell:Blurb}

Package: libghc-th-reify-many-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
  ${haskell:LongDescription}
  .
  ${haskell:Blurb}

Package: libghc-th-reify-many-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
  ${haskell:LongDescription}
  .
  ${haskell:Blurb}
