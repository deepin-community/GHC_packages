Source: haskell-crypto-random-api
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Priority: extra
Section: haskell
Build-Depends: debhelper (>= 9),
 haskell-devscripts (>= 0.10),
 cdbs,
 ghc,
 ghc-prof,
 libghc-entropy-dev,
 libghc-entropy-prof,
Build-Depends-Indep: ghc-doc,
 libghc-entropy-doc,
Standards-Version: 3.9.8
Homepage: http://github.com/vincenthz/hs-crypto-random-api
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git/
Vcs-Git: https://anonscm.debian.org/git/pkg-haskell/DHG_packages.git

Package: libghc-crypto-random-api-dev
Architecture: any
Depends: ${haskell:Depends},
 ${shlibs:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: simple random generators API for cryptography related code${haskell:ShortBlurb}
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 ${haskell:Blurb}

Package: libghc-crypto-random-api-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: simple random generators API for crypto-related code${haskell:ShortBlurb}
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 ${haskell:Blurb}

Package: libghc-crypto-random-api-doc
Architecture: all
Section: doc
Depends: ${misc:Depends},
 ${haskell:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Description: simple random generators API for cryptography related code${haskell:ShortBlurb}
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 ${haskell:Blurb}
