Source: haskell-crypto-random-api
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 9)
  , cdbs
  , haskell-devscripts (>= 0.8.13)
  , ghc
  , ghc-prof
  , libghc-entropy-dev
  , libghc-entropy-prof
Build-Depends-Indep: ghc-doc
  , libghc-entropy-doc
Standards-Version: 3.9.4
Homepage: http://hackage.haskell.org/package/crypto-random-api
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-crypto-random-api
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-crypto-random-api

Package: libghc-crypto-random-api-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: simple random generators API for cryptography related code
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 This package provides a library for the Haskell programming language.
 See http://www.haskell.org/ for more information on Haskell.

Package: libghc-crypto-random-api-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: simple random generators API for crypto-related code; profiling libraries
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 This package provides a library for the Haskell programming language, compiled
 for profiling.  See http://www.haskell.org/ for more information on Haskell.

Package: libghc-crypto-random-api-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: simple random generators API for cryptography related code; documentation
 This provides a class of Cryptographic Secure Random generator.
 .
 The main difference with the generic Haskell RNG is that it return bytes
 instead of an integer.
 .
 It is quite similar to the CryptoRandomGen class in crypto-api except
 that error are not returned to the user. Instead the user is suppose to
 handle reseeding by using the NeedReseed and SupplyEntropy methods. For
 other type of errors, the user is expected to generate bytes with the
 parameters bounds explicity defined here.
 .
 The CPRG need to be able to generate up to 2^20 bytes in one call.
 .
 This package provides the documentation for a library for the Haskell
 programming language.
 See http://www.haskell.org/ for more information on Haskell.
