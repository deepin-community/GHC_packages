Source: haskell-cereal-vector
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Priority: optional
Section: haskell
Rules-Requires-Root: no
Build-Depends: debhelper (>= 10),
 haskell-devscripts-minimal | haskell-devscripts (>= 0.8),
 cdbs,
 ghc,
 ghc-prof,
 libghc-cereal-dev (>= 0.3),
 libghc-cereal-prof (>= 0.3),
 libghc-vector-dev (>= 0.9),
 libghc-vector-prof (>= 0.9),
 libghc-quickcheck2-dev,
 libghc-cereal-dev,
 libghc-vector-dev,
Build-Depends-Indep: ghc-doc,
 libghc-cereal-doc,
 libghc-vector-doc,
Standards-Version: 4.6.2
Homepage: https://github.com/acfoltzer/cereal-vector
X-Description: Serialize instances for Data.Vector types
 Data.Serialize functions for Data.Vector.Generic vectors. Orphan
 instances are provided for Data.Vector, Data.Vector.Unboxed,
 Data.Vector.Storable, and Data.Vector.Primitive vectors.
 .
 The serialized format is an Int64 representing the length of the
 vector, followed by the Data.Serialized contents of each element.
 .
 Note that the functions in Data.Vector.Storable.UnsafeSerialize
 perform much better when serialization does not need to account for
 host endianness and word size.

Package: libghc-cereal-vector-dev
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-cereal-vector-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-cereal-vector-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
