Source: haskell-hsx2hs
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 9)
  , cdbs
  , haskell-devscripts (>= 0.9)
  , ghc
  , ghc-prof
  , libghc-src-exts-dev (>= 1.16)
  , libghc-src-exts-dev (<< 1.17)
  , libghc-src-exts-prof
  , libghc-src-meta-dev (>= 0.6)
  , libghc-src-meta-dev (<< 0.7)
  , libghc-src-meta-prof
  , libghc-mtl-dev (>> 2.0)
  , libghc-mtl-dev (<< 2.3)
  , libghc-mtl-prof
  , ghc-ghci
  , libghc-utf8-string-dev (>= 0.3)
  , libghc-utf8-string-dev (<< 1.1)
  , libghc-utf8-string-prof
Build-Depends-Indep: ghc-doc
  , libghc-src-exts-doc
  , libghc-src-meta-doc
  , libghc-mtl-doc
  , libghc-utf8-string-doc
Standards-Version: 3.9.4
Homepage: http://hackage.haskell.org/package/hsx2hs
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-hsx2hs
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-hsx2hs
X-Description: literal XML syntax in Haskell source code
 HSX (Haskell Source with XML) allows literal XML syntax in Haskell
 source code. The hsx2hs preprocessor translates .hsx source files
 into ordinary .hs files. Literal XML syntax is translated into
 function calls for creating XML values of the appropriate forms.
 hsx2hs transforms literal XML syntax into a series of function calls.
 Any project can make use of the syntax by providing definitions for
 those functions, and the XML values produced will be of the types
 specified. This works for any types, since hsx2hs doesn't make any
 assumptions, or inserts any information depending on types.
 XMLGenerator defines a few typeclasses that together cover the
 functions injected by the preprocessor. A project that uses these
 classes to provide the semantics for the injected syntax will be
 able to use any functions written in terms of these, allowing
 better code reusability than if each project defines its own
 semantics for the XML syntax. Also, the classes makes it possible
 to use the literal syntax at different types within the same module.
 Achieving that is not as simple as it may seem, but the XMLGenerator
 module provides all the necessary machinery.

Package: hsx2hs
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription} - preprocessor
 ${haskell:LongDescription}
 .
 This contains the hsx2hs executable for preprocessing.

Package: libghc-hsx2hs-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-hsx2hs-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-hsx2hs-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
