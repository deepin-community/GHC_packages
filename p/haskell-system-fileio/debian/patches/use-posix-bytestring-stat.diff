--- a/lib/Filesystem.hs
+++ b/lib/Filesystem.hs
@@ -118,6 +118,9 @@
 import           Data.Time.Clock.POSIX (posixSecondsToUTCTime)
 import qualified System.Posix as Posix
 import qualified System.Posix.Error as Posix
+#if MIN_VERSION_unix(2,5,1)
+import qualified System.Posix.Files.ByteString
+#endif

 #endif

@@ -952,6 +955,12 @@
	_ <- throwErrnoPathIfRetry failed loc path io
	return ()

+posixStat :: String -> FilePath -> IO Posix.FileStatus
+#if MIN_VERSION_unix(2,5,1)
+posixStat _ path = System.Posix.Files.ByteString.getFileStatus (R.encode R.posix path)
+#else
+posixStat loc path = withFd loc path Posix.getFdStatus
+
 withFd :: String -> FilePath -> (Posix.Fd -> IO a) -> IO a
 withFd fnName path = Exc.bracket open close where
	open = withFilePath path $ \cpath -> do
@@ -959,12 +968,11 @@
		return (Posix.Fd fd)
	close = Posix.closeFd

-posixStat :: String -> FilePath -> IO Posix.FileStatus
-posixStat loc path = withFd loc path Posix.getFdStatus
-
 foreign import ccall unsafe "open"
	c_open :: CString -> CInt -> IO CInt

+#endif
+
 foreign import ccall unsafe "free"
	c_free :: Ptr a -> IO ()
