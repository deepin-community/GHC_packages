Source: haskell-reactive-banana
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 7)
  , cdbs
  , haskell-devscripts (>= 0.8)
  , ghc
  , ghc-prof
  , libghc-quickcheck2-dev (>> 2.4)
  , libghc-quickcheck2-dev (<< 2.5)
  , libghc-quickcheck2-prof
  , libghc-transformers-dev (>> 0.2)
  , libghc-transformers-dev (<< 0.3)
  , libghc-transformers-prof
  , libghc-vault-dev (>> 0.1)
  , libghc-vault-dev (<< 0.2)
  , libghc-vault-prof
Build-Depends-Indep: ghc-doc
  , libghc-quickcheck2-doc
  , libghc-transformers-doc
  , libghc-vault-doc
Standards-Version: 3.9.2
Homepage: http://hackage.haskell.org/package/reactive-banana
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-reactive-banana
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-reactive-banana

Package: libghc-reactive-banana-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: small but solid library for FRP
 This package provides a library for the Haskell programming language.  See
 http://www.haskell.org/ for more information on Haskell.
 .
 The current focus of this library is to implement a subset of the semantic
 model for functional reactive programming pioneered by Conal Elliott.
 .
 Moreover, this library can hooked into any existing event-based framework.
 It is especially useful in conjunction with existing GUI frameworks like
 wxHaskell or gtk2hs.
 .
 This also means that your code can be a mix of FRP and imperative parts.
 Bored of programming imperative GUIs? Write some parts with FRP! Don't know
 how to express something with FRP? Switch back to imperative style!
 .
 In the spectrum of possible FRP implementations, this one features simple
 semantics but modest expressivity. Predicting space & time usage should be
 easy.
 .
 Stability forecast: Known inefficiencies that will be addressed. No
 semantic bugs expected. Significant API changes are likely in future
 versions.

Package: libghc-reactive-banana-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: small but solid library for FRP; profiling libraries
 This package provides a library for the Haskell programming language.  See
 http://www.haskell.org/ for more information on Haskell.
 .
 The current focus of this library is to implement a subset of the semantic
 model for functional reactive programming pioneered by Conal Elliott.
 .
 Moreover, this library can hooked into any existing event-based framework.
 It is especially useful in conjunction with existing GUI frameworks like
 wxHaskell or gtk2hs.
 .
 This also means that your code can be a mix of FRP and imperative parts.
 Bored of programming imperative GUIs? Write some parts with FRP! Don't know
 how to express something with FRP? Switch back to imperative style!
 .
 In the spectrum of possible FRP implementations, this one features simple
 semantics but modest expressivity. Predicting space & time usage should be
 easy.
 .
 Stability forecast: Known inefficiencies that will be addressed. No
 semantic bugs expected. Significant API changes are likely in future
 versions.

Package: libghc-reactive-banana-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: small but solid library for FRP; documentation
 This package provides a library for the Haskell programming language.  See
 http://www.haskell.org/ for more information on Haskell.
 .
 The current focus of this library is to implement a subset of the semantic
 model for functional reactive programming pioneered by Conal Elliott.
 .
 Moreover, this library can hooked into any existing event-based framework.
 It is especially useful in conjunction with existing GUI frameworks like
 wxHaskell or gtk2hs.
 .
 This also means that your code can be a mix of FRP and imperative parts.
 Bored of programming imperative GUIs? Write some parts with FRP! Don't know
 how to express something with FRP? Switch back to imperative style!
 .
 In the spectrum of possible FRP implementations, this one features simple
 semantics but modest expressivity. Predicting space & time usage should be
 easy.
 .
 Stability forecast: Known inefficiencies that will be addressed. No
 semantic bugs expected. Significant API changes are likely in future
 versions.
