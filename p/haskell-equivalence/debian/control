Source: haskell-equivalence
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders:
 Joachim Breitner <nomeata@debian.org>,
Priority: optional
Section: haskell
Build-Depends:
 cdbs,
 debhelper (>= 9),
 ghc (>= 8),
 ghc-prof,
 haskell-devscripts (>= 0.13),
 libghc-stmonadtrans-dev (>= 0.4.1),
 libghc-stmonadtrans-prof,
 libghc-mtl-dev (>= 2.0.1),
 libghc-mtl-prof,
 libghc-quickcheck2-dev (>= 2),
 libghc-test-framework-dev,
 libghc-test-framework-quickcheck2-dev,
 libghc-transformers-compat-dev (>= 0.3),
 libghc-transformers-compat-prof,
Build-Depends-Indep:
 ghc-doc,
 libghc-mtl-doc,
 libghc-stmonadtrans-doc,
 libghc-transformers-compat-doc,
Standards-Version: 4.1.4
Homepage: https://github.com/pa-ba/equivalence
Vcs-Browser: https://salsa.debian.org/haskell-team/DHG_packages/tree/master/p/haskell-equivalence
Vcs-Git: https://salsa.debian.org/haskell-team/DHG_packages.git
X-Description: maintaining an equivalence relation
  This is a Haskell implementation of Tarjan's Union-Find algorithm (Robert E.
  Tarjan. "Efficiency of a Good But Not Linear Set Union Algorithm", JACM
  22(2), 1975) in order to maintain an equivalence relation.

Package: libghc-equivalence-dev
Architecture: any
Depends:
 ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends:
 ${haskell:Recommends},
Suggests:
 ${haskell:Suggests},
Provides:
 ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-equivalence-prof
Architecture: any
Depends:
 ${haskell:Depends},
 ${misc:Depends},
Recommends:
 ${haskell:Recommends},
Suggests:
 ${haskell:Suggests},
Provides:
 ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-equivalence-doc
Architecture: all
Section: doc
Depends:
 ${haskell:Depends},
 ${misc:Depends},
Recommends:
 ${haskell:Recommends},
Suggests:
 ${haskell:Suggests},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
