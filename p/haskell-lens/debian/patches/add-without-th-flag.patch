From 42c73dc2026eb8aeeb1cf60ca4102357f3718a06 Mon Sep 17 00:00:00 2001
From: Joey Hess <joey@kitenet.net>
Date: Tue, 15 Oct 2013 09:56:50 -0400
Last-Update: 2014-04-14
Subject: [PATCH 2/3] add without-th flag
--- a/lens.cabal
+++ b/lens.cabal
@@ -180,6 +180,11 @@
   default: False
   manual: True

+-- Avoid bulding modules that need TH
+flag without-th
+  default: False
+  manual: True
+
 library
   build-depends:
     aeson                     >= 0.7      && < 0.8,
@@ -200,7 +205,6 @@
     parallel                  >= 3.1.0.1  && < 3.3,
     primitive                 >= 0.4.0.1  && < 0.6,
     profunctors               >= 4        && < 5,
-    reflection                >= 1.1.6    && < 2,
     scientific                >= 0.2      && < 0.3,
     semigroupoids             >= 4        && < 5,
     semigroups                >= 0.8.4    && < 1,
@@ -246,10 +250,8 @@
     Control.Lens.Internal.Level
     Control.Lens.Internal.Magma
     Control.Lens.Internal.Prism
-    Control.Lens.Internal.Reflection
     Control.Lens.Internal.Review
     Control.Lens.Internal.Setter
-    Control.Lens.Internal.TH
     Control.Lens.Internal.Zoom
     Control.Lens.Iso
     Control.Lens.Lens
@@ -261,7 +263,6 @@
     Control.Lens.Reified
     Control.Lens.Review
     Control.Lens.Setter
-    Control.Lens.TH
     Control.Lens.Traversal
     Control.Lens.Tuple
     Control.Lens.Type
@@ -294,19 +295,28 @@
     Data.Typeable.Lens
     Data.Vector.Lens
     Data.Vector.Generic.Lens
-    Generics.Deriving.Lens
-    GHC.Generics.Lens
     System.Exit.Lens
     System.FilePath.Lens
-    System.IO.Error.Lens
-    Language.Haskell.TH.Lens
     Numeric.Lens

-  other-modules:
-    Control.Lens.Internal.TupleIxedTH
-
   cpp-options: -traditional

+  if flag(without-th)
+    cpp-options: -DDISABLE_TEMPLATE_HASKELL
+  else
+    build-depends:
+      reflection                >= 1.1.6    && < 2
+    exposed-modules:
+      Control.Lens.Internal.Reflection
+      Control.Lens.Internal.TH
+      Control.Lens.TH
+      Generics.Deriving.Lens
+      GHC.Generics.Lens
+      Language.Haskell.TH.Lens
+      System.IO.Error.Lens
+    other-modules:
+      Control.Lens.Internal.TupleIxedTH
+
   if flag(safe)
     cpp-options: -DSAFE=1

@@ -340,6 +350,9 @@
   ghc-options: -Wall -threaded
   hs-source-dirs: tests

+  if flag(without-th)
+    buildable: False
+
   if flag(dump-splices)
     ghc-options: -ddump-splices

--- a/src/Control/Lens/Internal/Exception.hs
+++ b/src/Control/Lens/Internal/Exception.hs
@@ -39,7 +39,9 @@
 import Control.Exception as Exception
 import Control.Lens.Fold
 import Control.Lens.Getter
+#ifndef DISABLE_TEMPLATE_HASKELL
 import Control.Lens.Internal.Reflection
+#endif
 import Control.Monad.Catch as Catch
 import Data.Monoid
 import Data.Proxy
@@ -140,6 +142,7 @@
   handler_ l = handler l . const
   {-# INLINE handler_ #-}

+#ifndef DISABLE_TEMPLATE_HASKELL
 instance Handleable SomeException IO Exception.Handler where
   handler = handlerIO

@@ -151,7 +154,7 @@

 handlerCatchIO :: forall m a r. (Typeable a, Typeable1 m) => Getting (First a) SomeException a -> (a -> m r) -> Catch.Handler m r
 handlerCatchIO l f = reifyTypeable (preview l) $ \ (_ :: Proxy s) -> Catch.Handler (\(Handling a :: Handling a s m) -> f a)
-
+#endif
 ------------------------------------------------------------------------------
 -- Helpers
 ------------------------------------------------------------------------------
@@ -197,8 +200,10 @@
   showsPrec d _ = showParen (d > 10) $ showString "Handling ..."
   {-# INLINE showsPrec #-}

+#ifndef DISABLE_TEMPLATE_HASKELL
 instance (Reifies s (SomeException -> Maybe a), Typeable a, Typeable1 m, Typeable s) => Exception (Handling a s m) where
   toException _ = SomeException HandlingException
   {-# INLINE toException #-}
   fromException = fmap Handling . reflect (Proxy :: Proxy s)
   {-# INLINE fromException #-}
+#endif
