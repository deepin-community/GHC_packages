Author:         Trent W. Buck <trentbuck@gmail.com>
Forwarded:      not-needed
Bug-Debian:     http://www.debian.org/doc/debian-policy/ch-customized-programs.html#s11.4
Description:    use editor(1) and pager(1) instead of specific editors/pagers.
 Follow Debian Policy ยง11.4 - honour VISUAL, EDITOR and PAGER, but fall back on
 editor and pager respectively.  This allows the sysadmin to define site-local
 editor/pager defaults.  It also means things work when less and vi/emacs/nano
 aren't installed -- which is the case on a new Debian installation if you
 uncheck the "standard" tasksel task.
 .
 Not forwarded because editor(1) and pager(1) are Debian-specific.
Index: darcs-2.5.2/src/Darcs/Utils.hs
===================================================================
--- darcs-2.5.2.orig/src/Darcs/Utils.hs	2011-03-13 22:40:46.000000000 +0000
+++ darcs-2.5.2/src/Darcs/Utils.hs	2011-04-26 03:32:43.895798358 +0000
@@ -203,37 +203,29 @@
 runEditor f = do
   ed <- getEditor
   execInteractive ed f
-       `ortryrunning` execInteractive "emacs" f
-       `ortryrunning` execInteractive "emacs -nw" f
-       `ortryrunning` execInteractive "nano" f
-#ifdef WIN32
-       `ortryrunning` execInteractive "edit" f
-#endif

 getEditor :: IO String
 getEditor = getEnv "DARCS_EDITOR" `catchall`
              getEnv "DARCSEDITOR" `catchall`
              getEnv "VISUAL" `catchall`
-             getEnv "EDITOR" `catchall` return "vi"
+             getEnv "EDITOR" `catchall` return "editor"

 environmentHelpEditor :: ([String], [String])
 environmentHelpEditor = (["DARCS_EDITOR", "DARCSEDITOR", "VISUAL", "EDITOR"],[
  "To edit a patch description of email comment, Darcs will invoke an",
  "external editor.  Your preferred editor can be set as any of the",
  "environment variables $DARCS_EDITOR, $DARCSEDITOR, $VISUAL or $EDITOR.",
- "If none of these are set, vi(1) is used.  If vi crashes or is not",
- "found in your PATH, emacs, emacs -nw, nano and (on Windows) edit are",
- "each tried in turn."])
+ "If none of these are set, editor(1) is used."])

 getViewer :: IO String
 getViewer = getEnv "DARCS_PAGER" `catchall`
-             getEnv "PAGER" `catchall` return "less"
+             getEnv "PAGER" `catchall` return "pager"

 environmentHelpPager :: ([String], [String])
 environmentHelpPager = (["DARCS_PAGER", "PAGER"],[
  "Darcs will sometimes invoke a pager if it deems output to be too long",
  "to fit onscreen.  Darcs will use the pager specified by $DARCS_PAGER",
- "or $PAGER.  If neither are set, `less' will be used."])
+ "or $PAGER.  If neither are set, pager(1) will be used."])

 data PromptConfig = PromptConfig { pPrompt :: String
                                  , pBasicCharacters :: [Char]
