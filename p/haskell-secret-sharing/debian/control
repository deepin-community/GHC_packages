Source: haskell-secret-sharing
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Sean Whitton <spwhitton@spwhitton.name>
Priority: extra
Section: haskell
Build-Depends: debhelper (>= 9),
 haskell-devscripts (>= 0.9),
 cdbs,
 ghc,
 ghc-prof,
 libghc-dice-entropy-conduit-dev (>= 1.0.0.0),
 libghc-dice-entropy-conduit-prof,
 libghc-finite-field-dev (>= 0.8.0),
 libghc-finite-field-prof,
 libghc-polynomial-dev (>= 0.7.1),
 libghc-polynomial-prof,
 libghc-vector-dev (>= 0.10.11.0),
 libghc-vector-prof,
Build-Depends-Indep: ghc-doc,
 libghc-dice-entropy-conduit-doc,
 libghc-finite-field-doc,
 libghc-polynomial-doc,
 libghc-vector-doc,
Standards-Version: 3.9.6
Homepage: http://monoid.at/code
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git/tree/p/haskell-secret-sharing
Vcs-Git: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git
X-Description: Information-theoretic secure secret sharing
 Implementation of an (@m@,@n@)-threshold secret sharing scheme.
 A given ByteString @b@ (the secret) is split into @n@ shares,
 and any @m@ shares are sufficient to reconstruct @b@.
 The scheme preserves information-theoretic perfect secrecy in the sense that the knowledge of up
 to @m-1@ shares does not reveal any information about the secret @b@.
 .
 /Example in GHCi:/
 Suppose that you want to split the string \"my secret data\" into n=5 shares such that
 at least m=3 shares are necessary to reconstruct the secret.
 .
 >> :m + Data.ByteString.Lazy.Char8 Crypto.SecretSharing
 >> let secret = pack "my secret message!"
 >> shares <- encode 3 5 secret
 >> mapM_ (Prelude.putStrLn . show) shares -- each share should be deposited at a different site.
 > (1,"\134\168\154\SUBV\248\CAN:\250y<\GS\EOT*\t\222_\140")
 > (2,"\225\206\241\136\SUBse\199r\169\162\131D4\179P\210x")
 > (3,"~\238%\192\174\206\\\f\214\173\162\148\&3\139_\183\193\235")
 > (4,"Z\b0\188\DC2\f\247\f,\136\&6S\209\&5\n\FS,\223")
 > (5,"x\EM\CAN\DELI*<\193q7d\192!/\183v\DC3T")
 >> let shares' = Prelude.drop 2 shares
 >> decode shares'
 > "my secret message!"
 .
 The mathematics behind the secret sharing scheme is described in:
 \"/How to share a secret/.\" by Adi Shamir.
 In Communications of the ACM 22 (11): 612â€“613, 1979.

Package: libghc-secret-sharing-dev
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-secret-sharing-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-secret-sharing-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
