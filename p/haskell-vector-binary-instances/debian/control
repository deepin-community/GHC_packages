Source: haskell-vector-binary-instances
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Joachim Breitner <nomeata@debian.org>
Build-Depends: debhelper (>= 9)
  , cdbs
  , haskell-devscripts (>= 0.8.15)
  , ghc
  , ghc-prof
  , libghc-vector-dev (>= 0.6)
  , libghc-vector-prof
  , libghc-binary-dev (>= 0.7.2.1)
  , libghc-binary-prof
  , libghc-cereal-dev
  , libghc-cereal-prof
Build-Depends-Indep: ghc-doc
  , libghc-vector-doc
  , libghc-binary-doc
  , libghc-cereal-doc
Standards-Version: 3.9.5
Homepage: http://hackage.haskell.org/package/vector-binary-instances
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-vector-binary-instances
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-vector-binary-instances
X-Description: Instances of Data.Binary and Data.Serialize for vector
  This package provides instances for Binary for the types defined in the
  vector package, making it easy to serialize vectors to and from disk. It uses
  the generic interface to vectors, so all vector types are supported.

Package: libghc-vector-binary-instances-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-vector-binary-instances-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-vector-binary-instances-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
