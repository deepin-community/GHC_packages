--- a/src/main/haskell/Network/OAuth/Consumer.hs
+++ b/src/main/haskell/Network/OAuth/Consumer.hs
@@ -89,8 +89,8 @@
 import Control.Monad.Trans
 import System.IO
 import System.Entropy (getEntropy)
-import System.Locale (defaultTimeLocale)
 import Data.Time (getCurrentTime,formatTime)
+import Data.Time.Format (defaultTimeLocale)
 import Data.Char (chr,ord)
 import Data.List (intercalate,sort)
 import Data.Word (Word8)
@@ -390,6 +390,19 @@
           right (t1,a) = let OAuthMonadT mb = f a
                          in mb t1
 
+instance (Monad m) => Applicative (OAuthMonadT m) where
+    pure = return
+    (OAuthMonadT af) <*> (OAuthMonadT ax) =
+        OAuthMonadT $ \t -> do
+          ef <- af t
+          case ef of
+            Left s -> return $ Left s
+            Right (nt, f) -> do
+                              ex <- ax nt
+                              case ex of
+                                Left s -> return $ Left s
+                                Right (ft, x) -> return $ Right (ft, f x)
+
 instance MonadTrans OAuthMonadT where
   lift ma = OAuthMonadT $ \t -> do { a <- ma
                                    ; return $ Right (t,a)
--- a/hoauth.cabal
+++ b/hoauth.cabal
@@ -25,7 +25,6 @@
                , dataenc>=0.13.0.2
                , utf8-string>=0.3.4
                , time>=1.1.4
-               , old-locale>=1.0.0.2
                , random>=1.0.0.2
                , curl>=1.3.5
                , mtl>=1.1.0.2
