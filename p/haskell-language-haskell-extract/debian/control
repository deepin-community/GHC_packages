Source: haskell-language-haskell-extract
Priority: extra
Section: haskell
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Kiwamu Okabe <kiwamu@debian.or.jp>
Build-Depends: debhelper (>= 7.0),
               haskell-devscripts (>= 0.8.13),
               cdbs,
               ghc,
               ghc-prof,
               libghc-src-exts-dev,
               libghc-src-exts-prof,
               libghc-regex-posix-dev,
               libghc-regex-posix-prof
Build-Depends-Indep: ghc-doc,
                     libghc-src-exts-doc,
                     libghc-regex-posix-doc
Standards-Version: 3.9.2
Homepage: http://github.com/finnsson/template-helper
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-language-haskell-extract
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-language-haskell-extract
DM-Upload-Allowed: yes

Package: libghc-language-haskell-extract-dev
Architecture: any
Depends: ${shlibs:Depends},
         ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: automatically extract functions from the local code.
 language-haskell-extract contains some useful helper functions on top of
 Template Haskell.
 functionExtractor extracts all functions after a regexp-pattern.
 .
 > foo = "test"
 > boo = "testing"
 > bar = $(functionExtractor "oo$")
 .
 will automagically extract the functions ending with "oo" such as
 .
 > bar = [("foo",foo), ("boo",boo)]
 .
 This can be useful if you wish to extract all functions beginning with test
 (for a test-framework) or all functions beginning with wc (for a web service).
 .
 functionExtractorMap works like functionsExtractor but applies a function
 over all function-pairs.
 This functions is useful if the common return type of the functions is
 a type class.
 .
 This package contains the normal library files.

Package: libghc-language-haskell-extract-prof
Architecture: any
Depends: ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: automatically extract functions from the local code.; profiling libraries
 language-haskell-extract contains some useful helper functions on top of
 Template Haskell.
 functionExtractor extracts all functions after a regexp-pattern.
 .
 > foo = "test"
 > boo = "testing"
 > bar = $(functionExtractor "oo$")
 .
 will automagically extract the functions ending with "oo" such as
 .
 > bar = [("foo",foo), ("boo",boo)]
 .
 This can be useful if you wish to extract all functions beginning with test
 (for a test-framework) or all functions beginning with wc (for a web service).
 .
 functionExtractorMap works like functionsExtractor but applies a function
 over all function-pairs.
 This functions is useful if the common return type of the functions is
 a type class.
 .
 This package contains the libraries compiled with profiling enabled.

Package: libghc-language-haskell-extract-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: automatically extract functions from the local code.; documentation
 language-haskell-extract contains some useful helper functions on top of
 Template Haskell.
 functionExtractor extracts all functions after a regexp-pattern.
 .
 > foo = "test"
 > boo = "testing"
 > bar = $(functionExtractor "oo$")
 .
 will automagically extract the functions ending with "oo" such as
 .
 > bar = [("foo",foo), ("boo",boo)]
 .
 This can be useful if you wish to extract all functions beginning with test
 (for a test-framework) or all functions beginning with wc (for a web service).
 .
 functionExtractorMap works like functionsExtractor but applies a function
 over all function-pairs.
 This functions is useful if the common return type of the functions is
 a type class.
 .
 This package contains the documentation files.
