Source: haskell-store
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Ilias Tsitsimpis <iliastsi@debian.org>
Priority: optional
Section: haskell
Build-Depends: debhelper (>= 9),
 haskell-devscripts-minimal | haskell-devscripts (>= 0.9),
 cdbs,
 ghc,
 ghc-prof,
 libghc-async-dev (>= 2.0.2),
 libghc-async-prof,
 libghc-base-orphans-dev (>= 0.4.3),
 libghc-base-orphans-prof,
 libghc-base64-bytestring-dev (>= 0.1.1),
 libghc-base64-bytestring-prof,
 libghc-conduit-dev (>= 1.2.3.1),
 libghc-conduit-prof,
 libghc-contravariant-dev (>= 1.3),
 libghc-contravariant-prof,
 libghc-cryptohash-dev (>= 0.11.6),
 libghc-cryptohash-prof,
 libghc-free-dev (>= 4.11),
 libghc-free-prof,
 libghc-hashable-dev (>= 1.2.3.1),
 libghc-hashable-prof,
 libghc-hspec-dev (>= 2.1.2),
 libghc-hspec-prof,
 libghc-hspec-smallcheck-dev (>= 0.3.0),
 libghc-hspec-smallcheck-prof,
 libghc-lifted-base-dev (>= 0.2.3.3),
 libghc-lifted-base-prof,
 libghc-monad-control-dev (>= 0.3.3.0),
 libghc-monad-control-prof,
 libghc-mono-traversable-dev (>= 0.7.0),
 libghc-mono-traversable-prof,
 libghc-network-dev (>= 2.6.0.2),
 libghc-network-prof,
 libghc-primitive-dev (>= 0.6),
 libghc-primitive-prof,
 libghc-resourcet-dev (>= 1.1.3.3),
 libghc-resourcet-prof,
 libghc-safe-dev (>= 0.3.8),
 libghc-safe-prof,
 libghc-semigroups-dev (>= 0.8),
 libghc-semigroups-prof,
 libghc-smallcheck-dev (>= 1.1.1),
 libghc-smallcheck-prof,
 libghc-store-core-dev (>= 0.4),
 libghc-store-core-dev (<< 0.5),
 libghc-store-core-prof,
 libghc-streaming-commons-dev (>= 0.1.10.0),
 libghc-streaming-commons-prof,
 libghc-syb-dev (>= 0.4.4),
 libghc-syb-prof,
 libghc-text-dev (>= 1.2.0.4),
 libghc-text-prof,
 libghc-th-lift-dev (>= 0.7.1),
 libghc-th-lift-prof,
 libghc-th-lift-instances-dev (>= 0.1.4),
 libghc-th-lift-instances-prof,
 libghc-th-orphans-dev (>= 0.12.2),
 libghc-th-orphans-prof,
 libghc-th-reify-many-dev (>= 0.1.6),
 libghc-th-reify-many-prof,
 libghc-th-utilities-dev (>= 0.2),
 libghc-th-utilities-prof,
 libghc-unordered-containers-dev (>= 0.2.5.1),
 libghc-unordered-containers-prof,
 libghc-vector-dev (>= 0.10.12.3),
 libghc-vector-prof,
 libghc-void-dev (>= 0.5.11),
 libghc-void-prof,
 libghc-cereal-dev,
 libghc-cereal-vector-dev,
 libghc-criterion-dev,
 libghc-vector-binary-instances-dev,
 libghc-weigh-dev,
Build-Depends-Indep: ghc-doc,
 libghc-async-doc,
 libghc-base-orphans-doc,
 libghc-base64-bytestring-doc,
 libghc-conduit-doc,
 libghc-contravariant-doc,
 libghc-cryptohash-doc,
 libghc-free-doc,
 libghc-hashable-doc,
 libghc-hspec-doc,
 libghc-hspec-smallcheck-doc,
 libghc-lifted-base-doc,
 libghc-monad-control-doc,
 libghc-mono-traversable-doc,
 libghc-network-doc,
 libghc-primitive-doc,
 libghc-resourcet-doc,
 libghc-safe-doc,
 libghc-semigroups-doc,
 libghc-smallcheck-doc,
 libghc-store-core-doc,
 libghc-streaming-commons-doc,
 libghc-syb-doc,
 libghc-text-doc,
 libghc-th-lift-doc,
 libghc-th-lift-instances-doc,
 libghc-th-orphans-doc,
 libghc-th-reify-many-doc,
 libghc-th-utilities-doc,
 libghc-unordered-containers-doc,
 libghc-vector-doc,
 libghc-void-doc,
Standards-Version: 4.1.1
Homepage: https://github.com/fpco/store
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git/tree/p/haskell-store
Vcs-Git: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git
X-Description: Fast binary serialization
 The 'store' package provides efficient binary serialization. There are a
 couple features that particularly distinguish it from most prior Haskell
 serialization libraries:
 .
  * Its primary goal is speed. By default, direct machine representations
    are used for things like numeric values (Int, Double, Word32, etc)
    and buffers (Text, ByteString, Vector, etc). This means that much of
    serialization uses the equivalent of memcpy.
  * Instead of implementing lazy serialization / deserialization involving
    multiple input / output buffers, peek and poke always work with a
    single buffer. This buffer is allocated by asking the value for its
    size before encoding. This simplifies the encoding logic, and allows
    for highly optimized tight loops.
  * store can optimize size computations by knowing when some types always
    use the same number of bytes. This allows for computing the byte size
    of a `Vector Int32` by just doing `length v * 4`.
 .
 It also features:
 .
  * Optimized serialization instances for many types from base, vector,
    bytestring, text, containers, time, template-haskell, and more.
  * TH and GHC Generics based generation of Store instances for datatypes
  * TH generation of testcases

Package: libghc-store-dev
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-store-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Provides: ${haskell:Provides},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-store-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Conflicts: ${haskell:Conflicts},
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
