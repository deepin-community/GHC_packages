Source: haskell-pipes-parse
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 9)
  , cdbs
  , haskell-devscripts (>= 0.9)
  , ghc
  , ghc-prof
  , libghc-pipes-dev (>= 4.1)
  , libghc-pipes-dev (<< 4.2)
  , libghc-pipes-prof
  , libghc-transformers-dev (>= 0.2.0.0)
  , libghc-transformers-dev (<< 0.5)
  , libghc-transformers-prof
Build-Depends-Indep: ghc-doc
  , libghc-pipes-doc
  , libghc-transformers-doc
Standards-Version: 3.9.5
Homepage: http://hackage.haskell.org/package/pipes-parse
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-pipes-parse
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-pipes-parse
X-Description: parsing infrastructure for the pipes ecosystem
 pipes-parse builds upon the pipes library to provide shared parsing
 idioms and utilities:
  * Perfect Streaming: Program in a list-like style in constant memory
  * Leftovers: Save unused input for later consumption
  * Connect and Resume: Use StateT to save unused input for later
  * Termination Safety: Detect and recover from end of input

Package: libghc-pipes-parse-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-pipes-parse-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}

Package: libghc-pipes-parse-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: ${haskell:ShortDescription}${haskell:ShortBlurb}
 ${haskell:LongDescription}
 .
 ${haskell:Blurb}
