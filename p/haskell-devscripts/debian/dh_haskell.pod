=head1 NAME

dh_haskell - Builds Cabalized libraries, calculates Haskell dependencies, and adds postinst and prerm Haskell scripts

=head1 SYNOPSIS

B<dh_haskell> [S<I<debhelper options>>]

B<dh_haskell_prep> [S<I<debhelper options>>]

B<dh_haskell_configure> [S<I<debhelper options>>]

B<dh_haskell_build> [S<I<debhelper options>>]

B<dh_haskell_install> [S<I<debhelper options>>]

B<dh_haskell_buildinst> [S<I<debhelper options>>]

B<dh_haskell_depends> [S<I<debhelper options>>]

=head1 DESCRIPTION

dh_haskell is a debhelper program that helps with building Haskell libraries.

It does several things.  It can generate postinst and prerm scripts when
necessary.  It automates building libraries for the different supported
Haskell systems in Debian.  It generates substvars for your control
file so that the library packages depend on the appropriate packages.
In short, it can drive the entire process.

=head1 REQUIREMENTS

dh_haskell assumes that your packages are adhering to the draft Haskell policy.

Your control file must build the binary library files using packages
named libI<type>-I<name>-I<variation>, where I<type> is ghc5, ghc6, or
nhc98; I<name> is the name of your package; and I<variation> is dev or
prof. These packages should be Architecture: any.

The I<prof> package contains profiling enabled libraries. Currently
only GHC supports profiling. Due to restrictions of the GHC compiler,
if you provide a I<dev> package you should also provide a
corresponding I<prof> package.

If you build a Hugs package, name it libhugs-I<name>.  However, dh_haskell
will also accept libhugs-I<name>-dev for consistency.  Most Hugs packages
should be Architecture: all.  If your package uses foreign methods,
maybe it should be Architecture: any (please let me know if you have
an answer to that).

dh_haskell figures out how to build your package based on the I<type>,
so you must adhere to this naming scheme.

dh_haskell assumes that the Haskell Cabal (see www.haskell.org/cabal) can
be used to build your package.  It obtains package name and version
information from the Cabal Setup.Description file.

=head1 HOW TO PACKAGE A HASKELL LIBRARY

Start from a basic debian/ directory.  Add entries to Build-Depends for
haskell-devscripts and the compilers for any binaries you will build.

In the clause in control for each binary package, make sure to add
${haskell:Depends} to the Depends: line.

In rules, if you're using debhelper v7, use dh S<I<command>> --with
haskell_devscripts .  If not, add dh_haskell in the install target and
dh_haskell_depends before dh_gencontrol in binary.  Your build and configure
targets should be empty.

Remember that you should add -a to all debhelper calls for multi-binary
packages.  That goes for dh_haskell too.

Your clean target should contain:

C<-./setup clean>
C<--rm -rf setup Setup.hi Setup.ho Setup.o .*config* dist>

That's it.  dh_haskell does the rest.

=head1 EXAMPLES

See the Debian source packages for haskelldb, haskell-filepath, haskell-hsql,
haskell-http etc.

=head1 BUGS

hugs and ghc6 are the only supported targets at the moment.  Cabal does
not yet support nhc98.

=head1 SEE ALSO

L<dh_haskell_prep(1)>
L<dh_haskell_configure(1)>
L<dh_haskell_build(1)>
L<dh_haskell_install(1)>
L<dh_haskell_buildinst(1)>
L<dh_haskell_depends(1)>
L<dh_haskell_clean(1)>
L<debhelper(7)>

=head1 AUTHOR

John Goerzen <jgoerzen@complete.org>

Based on ideas in dh_python by Josselin Mouette <joss@debian.org>
