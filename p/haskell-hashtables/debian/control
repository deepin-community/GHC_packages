Source: haskell-hashtables
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Iain Lane <laney@debian.org>
Priority: extra
Section: haskell
Build-Depends: debhelper (>= 9),
 haskell-devscripts (>= 0.9),
 cdbs,
 ghc,
 ghc-prof,
 libghc-hashable-dev,
 libghc-hashable-prof,
 libghc-primitive-dev,
 libghc-primitive-prof,
 libghc-vector-dev (>= 0.7),
 libghc-vector-dev (<< 0.12),
 libghc-vector-prof,
Build-Depends-Indep: ghc-doc,
 libghc-hashable-doc,
 libghc-primitive-doc,
 libghc-vector-doc,
Standards-Version: 3.9.4
Homepage: http://github.com/gregorycollins/hashtables
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-hashtables
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-hashtables

Package: libghc-hashtables-dev
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: mutable hash tables${haskell:ShortBlurb}
 This package provides a couple of different implementations of mutable hash
 tables in the ST monad, as well as a typeclass abstracting their common
 operations, and a set of wrappers to use the hash tables in the IO monad.
 .
 There are three hash table implementations:
 .
  * Data.HashTable.ST.Basic contains a basic open-addressing hash table using
    linear probing as the collision strategy. This should currently be the
    fastest available hash table implementation for lookups, although it has a
    higher memory overhead than others.
  * Data.HashTable.ST.Cuckoo contains an implementation of "cuckoo hashing".
    Cuckoo hashing has worst-case O(1) lookups and performs well even when the
    table is highly loaded.
  * Data.HashTable.ST.Linear contains a linear hash table, which trades some
    insert and lookup performance for higher space efficiency and much shorter
    delays when expanding the table.
 .
 ${haskell:Blurb}

Package: libghc-hashtables-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: mutable hash tables -- profiling libraries${haskell:ShortBlurb}
 This package provides a couple of different implementations of mutable hash
 tables in the ST monad, as well as a typeclass abstracting their common
 operations, and a set of wrappers to use the hash tables in the IO monad.
 .
 There are three hash table implementations:
 .
  * Data.HashTable.ST.Basic contains a basic open-addressing hash table using
    linear probing as the collision strategy. This should currently be the
    fastest available hash table implementation for lookups, although it has a
    higher memory overhead than others.
  * Data.HashTable.ST.Cuckoo contains an implementation of "cuckoo hashing".
    Cuckoo hashing has worst-case O(1) lookups and performs well even when the
    table is highly loaded.
  * Data.HashTable.ST.Linear contains a linear hash table, which trades some
    insert and lookup performance for higher space efficiency and much shorter
    delays when expanding the table.
 .
 ${haskell:Blurb}

Package: libghc-hashtables-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
 ${misc:Depends},
 ${shlibs:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: mutable hash tables -- documentation${haskell:ShortBlurb}
 This package provides a couple of different implementations of mutable hash
 tables in the ST monad, as well as a typeclass abstracting their common
 operations, and a set of wrappers to use the hash tables in the IO monad.
 .
 There are three hash table implementations:
 .
  * Data.HashTable.ST.Basic contains a basic open-addressing hash table using
    linear probing as the collision strategy. This should currently be the
    fastest available hash table implementation for lookups, although it has a
    higher memory overhead than others.
  * Data.HashTable.ST.Cuckoo contains an implementation of "cuckoo hashing".
    Cuckoo hashing has worst-case O(1) lookups and performs well even when the
    table is highly loaded.
  * Data.HashTable.ST.Linear contains a linear hash table, which trades some
    insert and lookup performance for higher space efficiency and much shorter
    delays when expanding the table.
 .
 ${haskell:Blurb}
