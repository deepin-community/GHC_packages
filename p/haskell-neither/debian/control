Source: haskell-neither
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 7)
  , cdbs
  , haskell-devscripts (>= 0.8)
  , ghc
  , ghc-prof
  , libghc-failure-dev (>> 0.1.0)
  , libghc-failure-dev (<< 0.3)
  , libghc-failure-prof
  , libghc-transformers-dev (>> 0.2.1)
  , libghc-transformers-dev (<< 0.3)
  , libghc-transformers-prof
Build-Depends-Indep: ghc-doc
  , libghc-failure-doc
  , libghc-transformers-doc
Standards-Version: 3.9.2
Homepage: http://hackage.haskell.org/package/neither
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-neither
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-neither

Package: libghc-neither-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: version of Either with good monad/applicative instances
 This package provides a library for the Haskell programming language.
 See http://www.haskell.org/ for more information on Haskell.
 .
 The standard Either datatype suffers from a lack of monad and
 applicative instances. To make matters worse, the mtl and transformers
 packages provide orphan instances which conflict with each other, as
 well as defining a transformer version which has an usually unnecessary
 superclass constraint.
 .
 Besides these annoyances, there is another issue: there exist two
 reasonable definitions of the Applicative instance for Either: one
 that holds onto only the first Left value, or one that appends all Left
 values together via a Monoid instance. The former is compatible with the
 monad instance, while the latter is not.
 .
 This package defines three datatypes, some helpers functions and
 instances. The data types are AEither, MEither and MEitherT. AEither
 provides an Applicative instance which appends Left values, MEither
 provides the monadic definition, and MEitherT is a monad transformer.

Package: libghc-neither-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: version of Either with good monad/applicative instances; profiling libraries
 This package provides a library for the Haskell programming language,
 compiled for profiling.
 See http://www.haskell.org/ for more information on Haskell.
 .
 The standard Either datatype suffers from a lack of monad and
 applicative instances. To make matters worse, the mtl and transformers
 packages provide orphan instances which conflict with each other, as
 well as defining a transformer version which has an usually unnecessary
 superclass constraint.
 .
 Besides these annoyances, there is another issue: there exist two
 reasonable definitions of the Applicative instance for Either: one
 that holds onto only the first Left value, or one that appends all Left
 values together via a Monoid instance. The former is compatible with the
 monad instance, while the latter is not.
 .
 This package defines three datatypes, some helpers functions and
 instances. The data types are AEither, MEither and MEitherT. AEither
 provides an Applicative instance which appends Left values, MEither
 provides the monadic definition, and MEitherT is a monad transformer.

Package: libghc-neither-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: version of Either with good monad/applicative instances; documentation
 This package provides the documentation for a library for the Haskell
 programming language.
 See http://www.haskell.org/ for more information on Haskell.
 .
 The standard Either datatype suffers from a lack of monad and
 applicative instances. To make matters worse, the mtl and transformers
 packages provide orphan instances which conflict with each other, as
 well as defining a transformer version which has an usually unnecessary
 superclass constraint.
 .
 Besides these annoyances, there is another issue: there exist two
 reasonable definitions of the Applicative instance for Either: one
 that holds onto only the first Left value, or one that appends all Left
 values together via a Monoid instance. The former is compatible with the
 monad instance, while the latter is not.
 .
 This package defines three datatypes, some helpers functions and
 instances. The data types are AEither, MEither and MEitherT. AEither
 provides an Applicative instance which appends Left values, MEither
 provides the monadic definition, and MEitherT is a monad transformer.
