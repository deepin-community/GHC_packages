Index: haskell-nettle-0.1.0/src/Crypto/Nettle/CCM.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Crypto/Nettle/CCM.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Crypto/Nettle/CCM.hs	2013-12-10 09:02:56.509055511 -0500
@@ -46,7 +46,9 @@
 import Nettle.Utils

 -- internal functions are not camelCase on purpose
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Use camelCase" #-}
+#endif

 -- ccm needs a 128-bit block cipher

Index: haskell-nettle-0.1.0/src/Crypto/Nettle/Ciphers.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Crypto/Nettle/Ciphers.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Crypto/Nettle/Ciphers.hs	2013-12-10 09:03:03.945194778 -0500
@@ -73,7 +73,9 @@
 import Nettle.Utils

 -- internal functions are not camelCase on purpose
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Use camelCase" #-}
+#endif

 #define INSTANCE_CIPHER(Typ) \
 instance Cipher Typ where \
Index: haskell-nettle-0.1.0/src/Crypto/Nettle/Ciphers/Internal.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Crypto/Nettle/Ciphers/Internal.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Crypto/Nettle/Ciphers/Internal.hs	2013-12-10 09:03:09.061290201 -0500
@@ -39,7 +39,9 @@
 import Crypto.Nettle.Ciphers.ForeignImports

 -- internal functions are not camelCase on purpose
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Use camelCase" #-}
+#endif

 class NettleCipher c where
	-- | pointer to new context, key length, (const) key pointer
Index: haskell-nettle-0.1.0/src/Crypto/Nettle/Hash.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Crypto/Nettle/Hash.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Crypto/Nettle/Hash.hs	2013-12-10 09:03:14.489391831 -0500
@@ -69,7 +69,9 @@
 import qualified Data.ByteString.Internal as B

 -- internal functions are not camelCase on purpose
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Use camelCase" #-}
+#endif

 nettleHashBlockSize  :: NettleHashAlgorithm a => Tagged a Int
 nettleHashBlockSize = nha_block_size
Index: haskell-nettle-0.1.0/src/Crypto/Nettle/UMAC.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Crypto/Nettle/UMAC.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Crypto/Nettle/UMAC.hs	2013-12-10 09:03:24.437577908 -0500
@@ -38,7 +38,9 @@
 import Crypto.Nettle.Hash.ForeignImports

 -- internal functions are not camelCase on purpose
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Use camelCase" #-}
+#endif

 {-|
 'UMAC' is a class of keyed hash algorithms that take an additional nonce.
Index: haskell-nettle-0.1.0/src/Tests/Ciphers.hs
===================================================================
--- haskell-nettle-0.1.0.orig/src/Tests/Ciphers.hs	2013-10-19 10:01:14.000000000 -0400
+++ haskell-nettle-0.1.0/src/Tests/Ciphers.hs	2013-12-10 09:03:34.185760194 -0500
@@ -75,8 +75,9 @@
			, label "ctrCombine + ctrCombine 10 blocks" $ (ctrCombine c iv . ctrCombine c iv) block10 == block10
			, label "ctrCombine + ctrCombine unaligned" $ (ctrCombine c iv . ctrCombine c iv) input   == input
			]
-
+#ifndef DEBIAN_NO_GHCI
 {-# ANN module "HLint: ignore Reduce duplication" #-}
+#endif
 genStreamTest :: StreamCipher c => c -> Test
 genStreamTest c' = testProperty ("generated " ++ cipherName c' ++ " stream cipher test") $ do
	c <- genCipher c'
