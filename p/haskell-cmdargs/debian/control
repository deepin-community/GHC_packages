Source: haskell-cmdargs
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Priority: extra
Section: haskell
Build-Depends: debhelper (>= 9),
 haskell-devscripts (>= 0.10),
 cdbs,
 ghc,
 ghc-prof,
Build-Depends-Indep: ghc-doc,
Standards-Version: 3.9.8
Homepage: https://github.com/ndmitchell/cmdargs#readme
Vcs-Browser: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git/tree/p/haskell-cmdargs
Vcs-Git: https://anonscm.debian.org/cgit/pkg-haskell/DHG_packages.git

Package: libghc-cmdargs-dev
Architecture: any
Depends: ${haskell:Depends},
 ${shlibs:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: command-line argument processing${haskell:ShortBlurb}
 It provides an easy way to define command-line parsers. Most users
 will want to use the System.Console.CmdArgs.Implicit module, whose
 documentation contains an example.
 .
 System.Console.CmdArgs.Explicit provides a way to write command-line
 parsers for both single mode programs (most programs) and multiple
 mode programs (e.g. darcs or cabal). Parsers are defined by
 constructing a data structure.
 .
 System.Console.CmdArgs.Implicit provides a way to concisely define
 command-line parsers, up to three times shorter than getopt. These
 parsers are translated into the Explicit data type.
 .
 System.Console.CmdArgs.GetOpt provides a wrapper allowing
 compatiblity with existing getopt parsers, mapping to the Explicit
 data type.
 .
 ${haskell:Blurb}

Package: libghc-cmdargs-prof
Architecture: any
Depends: ${haskell:Depends},
 ${misc:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Provides: ${haskell:Provides},
Description: command-line argument processing${haskell:ShortBlurb}
 It provides an easy way to define command-line parsers. Most users
 will want to use the System.Console.CmdArgs.Implicit module, whose
 documentation contains an example.
 .
 System.Console.CmdArgs.Explicit provides a way to write command-line
 parsers for both single mode programs (most programs) and multiple
 mode programs (e.g. darcs or cabal). Parsers are defined by
 constructing a data structure.
 .
 System.Console.CmdArgs.Implicit provides a way to concisely define
 command-line parsers, up to three times shorter than getopt. These
 parsers are translated into the Explicit data type.
 .
 System.Console.CmdArgs.GetOpt provides a wrapper allowing
 compatiblity with existing getopt parsers, mapping to the Explicit
 data type.
 .
 ${haskell:Blurb}

Package: libghc-cmdargs-doc
Architecture: all
Section: doc
Depends: ${misc:Depends},
 ${haskell:Depends},
Recommends: ${haskell:Recommends},
Suggests: ${haskell:Suggests},
Description: command-line argument processing${haskell:ShortBlurb}
 It provides an easy way to define command-line parsers. Most users
 will want to use the System.Console.CmdArgs.Implicit module, whose
 documentation contains an example.
 .
 System.Console.CmdArgs.Explicit provides a way to write command-line
 parsers for both single mode programs (most programs) and multiple
 mode programs (e.g. darcs or cabal). Parsers are defined by
 constructing a data structure.
 .
 System.Console.CmdArgs.Implicit provides a way to concisely define
 command-line parsers, up to three times shorter than getopt. These
 parsers are translated into the Explicit data type.
 .
 System.Console.CmdArgs.GetOpt provides a wrapper allowing
 compatiblity with existing getopt parsers, mapping to the Explicit
 data type.
 .
 ${haskell:Blurb}
