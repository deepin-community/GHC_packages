Source: haskell-cprng-aes
Section: haskell
Priority: extra
Maintainer: Debian Haskell Group <pkg-haskell-maintainers@lists.alioth.debian.org>
Uploaders: Clint Adams <clint@debian.org>
Build-Depends: debhelper (>= 9)
  , cdbs
  , haskell-devscripts (>= 0.9)
  , ghc
  , ghc-prof
  , libghc-byteable-dev
  , libghc-byteable-prof
  , libghc-crypto-random-dev (>> 0.0.7)
  , libghc-crypto-random-dev (<< 0.1)
  , libghc-crypto-random-prof
  , libghc-cipher-aes-dev (>> 0.2.9)
  , libghc-cipher-aes-dev (<< 0.3)
  , libghc-cipher-aes-prof
Build-Depends-Indep: ghc-doc
  , libghc-byteable-doc
  , libghc-crypto-random-doc
  , libghc-cipher-aes-doc
Standards-Version: 3.9.4
Homepage: http://hackage.haskell.org/package/cprng-aes
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-cprng-aes
Vcs-Browser: http://darcs.debian.org/cgi-bin/darcsweb.cgi?r=pkg-haskell/haskell-cprng-aes

Package: libghc-cprng-aes-dev
Architecture: any
Depends: ${haskell:Depends}
  , ${shlibs:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: pseudo-random number generator using AES in counter mode${haskell:ShortBlurb}
 It contains a simple crypto pseudo-random-number-generator with
 really good randomness property.
 .
 Using ent, a randomness property maker on one 1Mb sample:
 Entropy = 7.999837 bits per byte. Optimum compression would reduce
 the size of this 1048576 byte file by 0 percent. Chi square distribution
 for 1048576 samples is 237.02 Arithmetic mean value of data bytes is
 127.3422 (127.5 = random) Monte Carlo value for Pi is 3.143589568
 (error 0.06 percent).
 .
 Compared to urandom with the same sampling: Entropy = 7.999831 bits per
 byte. Optimum compression would reduce the size of this 1048576 byte file
 by 0 percent. Chi square distribution for 1048576 samples is 246.63
 Arithmetic mean value of data bytes is 127.6347 (127.5 = random). Monte
 Carlo value for Pi is 3.132465868 (error 0.29 percent).
 .
 ${haskell:Blurb}

Package: libghc-cprng-aes-prof
Architecture: any
Depends: ${haskell:Depends}
  , ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: pseudo-random number generator using AES in counter mode${haskell:ShortBlurb}
 It contains a simple crypto pseudo-random-number-generator with
 really good randomness property.
 .
 Using ent, a randomness property maker on one 1Mb sample:
 Entropy = 7.999837 bits per byte. Optimum compression would reduce
 the size of this 1048576 byte file by 0 percent. Chi square distribution
 for 1048576 samples is 237.02 Arithmetic mean value of data bytes is
 127.3422 (127.5 = random) Monte Carlo value for Pi is 3.143589568
 (error 0.06 percent).
 .
 Compared to urandom with the same sampling: Entropy = 7.999831 bits per
 byte. Optimum compression would reduce the size of this 1048576 byte file
 by 0 percent. Chi square distribution for 1048576 samples is 246.63
 Arithmetic mean value of data bytes is 127.6347 (127.5 = random). Monte
 Carlo value for Pi is 3.132465868 (error 0.29 percent).
 .
 ${haskell:Blurb}

Package: libghc-cprng-aes-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}, ${haskell:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: pseudo-random number generator using AES in counter mode${haskell:ShortBlurb}
  It contains a simple crypto pseudo-random-number-generator with
 really good randomness property.
 .
 Using ent, a randomness property maker on one 1Mb sample:
 Entropy = 7.999837 bits per byte. Optimum compression would reduce
 the size of this 1048576 byte file by 0 percent. Chi square distribution
 for 1048576 samples is 237.02 Arithmetic mean value of data bytes is
 127.3422 (127.5 = random) Monte Carlo value for Pi is 3.143589568
 (error 0.06 percent).
 .
 Compared to urandom with the same sampling: Entropy = 7.999831 bits per
 byte. Optimum compression would reduce the size of this 1048576 byte file
 by 0 percent. Chi square distribution for 1048576 samples is 246.63
 Arithmetic mean value of data bytes is 127.6347 (127.5 = random). Monte
 Carlo value for Pi is 3.132465868 (error 0.29 percent).
 .
 ${haskell:Blurb}
